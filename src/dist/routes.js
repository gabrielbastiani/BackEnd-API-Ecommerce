"use strict";
exports.__esModule = true;
exports.router = void 0;
var express_1 = require("express");
var multer_1 = require("multer");
// -- ROUTES ADMIN --
var ActiveOrDesactiveAdminController_1 = require("./controllers/users/admin/ActiveOrDesactiveAdminController");
var AdminCreateController_1 = require("./controllers/users/admin/AdminCreateController");
var EmployeCreateController_1 = require("./controllers/users/admin/EmployeCreateController");
var AdminRoleController_1 = require("./controllers/users/admin/AdminRoleController");
var AuthAdminController_1 = require("./controllers/users/admin/AuthAdminController");
var AuthenticatedEmailAdminController_1 = require("./controllers/users/admin/AuthenticatedEmailAdminController");
var DeleteAdminOrEmployeController_1 = require("./controllers/users/admin/DeleteAdminOrEmployeController");
var DetailAdminController_1 = require("./controllers/users/admin/DetailAdminController");
var ExportAdminController_1 = require("./controllers/users/admin/ExportAdminController");
var ListExactAdminNameController_1 = require("./controllers/users/admin/ListExactAdminNameController");
var ListExactAdminController_1 = require("./controllers/users/admin/ListExactAdminController");
var PageListAllAdminsController_1 = require("./controllers/users/admin/PageListAllAdminsController");
var UpdateAllDateAdminController_1 = require("./controllers/users/admin/UpdateAllDateAdminController");
var AdminRoleEmployeeController_1 = require("./controllers/users/admin/AdminRoleEmployeeController");
var AdminUpdateNameController_1 = require("./controllers/users/admin/AdminUpdateNameController");
var EmailPasswordController_1 = require("./controllers/users/admin/passwordRecoveryAdmin/EmailPasswordController");
var DeleteAdminPasswordRecoveryIDController_1 = require("./controllers/users/admin/passwordRecoveryAdmin/DeleteAdminPasswordRecoveryIDController");
var FindAdminRecoveryIDController_1 = require("./controllers/users/admin/passwordRecoveryAdmin/FindAdminRecoveryIDController");
var RecoveryPasswordAdminController_1 = require("./controllers/users/admin/passwordRecoveryAdmin/RecoveryPasswordAdminController");
var EmailPasswordDashboardController_1 = require("./controllers/users/admin/passwordRecoveryAdmin/EmailPasswordDashboardController");
var ListSuperAdminController_1 = require("./controllers/users/admin/ListSuperAdminController");
// -- ROUTES CUSTOMER --
var ActiveOrDesactiveCustomerController_1 = require("./controllers/users/customer/ActiveOrDesactiveCustomerController");
var AuthCustomerController_1 = require("./controllers/users/customer/AuthCustomerController");
var CreateCustomerController_1 = require("./controllers/users/customer/CreateCustomerController");
var DeleteCustomerController_1 = require("./controllers/users/customer/DeleteCustomerController");
var DetailCustomerController_1 = require("./controllers/users/customer/DetailCustomerController");
var ExportCustomerController_1 = require("./controllers/users/customer/ExportCustomerController");
var ListExactCustomerNameController_1 = require("./controllers/users/customer/ListExactCustomerNameController");
var ListExactCustomerController_1 = require("./controllers/users/customer/ListExactCustomerController");
var PageListAllCustomerController_1 = require("./controllers/users/customer/PageListAllCustomerController");
var UpdateAllDateCustomerController_1 = require("./controllers/users/customer/UpdateAllDateCustomerController");
var CustomerUpdateNameController_1 = require("./controllers/users/customer/CustomerUpdateNameController");
var CustomerUpdateNewslatterController_1 = require("./controllers/users/customer/CustomerUpdateNewslatterController");
var DeletePasswordRecoveryIDCustomerController_1 = require("./controllers/users/customer/passwordRecoveryCustomer/DeletePasswordRecoveryIDCustomerController");
var FindRecoveryIDCustomerController_1 = require("./controllers/users/customer/passwordRecoveryCustomer/FindRecoveryIDCustomerController");
var CustomerRecoveryPasswordController_1 = require("./controllers/users/customer/passwordRecoveryCustomer/CustomerRecoveryPasswordController");
var CreateDeliveryAddressCustomerController_1 = require("./controllers/users/customer/deliveryAddressCustomer/CreateDeliveryAddressCustomerController");
var UpdateAllDateDeliveryAddressCustomerCustomerController_1 = require("./controllers/users/customer/deliveryAddressCustomer/UpdateAllDateDeliveryAddressCustomerCustomerController");
var DeleteDeliveryAddressCustomerController_1 = require("./controllers/users/customer/deliveryAddressCustomer/DeleteDeliveryAddressCustomerController");
var EmailPasswordDashboardCustomerController_1 = require("./controllers/users/customer/passwordRecoveryCustomer/EmailPasswordDashboardCustomerController");
var EmailPasswordCustomerController_1 = require("./controllers/users/customer/passwordRecoveryCustomer/EmailPasswordCustomerController");
// -- ROUTES STORE --
var CreateStoreController_1 = require("./controllers/store/CreateStoreController");
var FindUniqueStoreController_1 = require("./controllers/store/FindUniqueStoreController");
var StoreController_1 = require("./controllers/store/StoreController");
var FindFirstStoreController_1 = require("./controllers/store/FindFirstStoreController");
var DeleteStoreController_1 = require("./controllers/store/DeleteStoreController");
var UpdateLogoStoreController_1 = require("./controllers/store/UpdateLogoStoreController");
var UpdateAllDateStoreController_1 = require("./controllers/store/UpdateAllDateStoreController");
// -- ROUTES SOCIAL MEDIA --
var CreateSocialMediaController_1 = require("./controllers/store/socialMedia/CreateSocialMediaController");
var UpdateOrderSocialMediaController_1 = require("./controllers/store/socialMedia/UpdateOrderSocialMediaController");
var ListAllSocialMediaOrderAndPositionController_1 = require("./controllers/store/socialMedia/ListAllSocialMediaOrderAndPositionController");
var UpdateSocialMediaNameController_1 = require("./controllers/store/socialMedia/UpdateSocialMediaNameController");
var UpdateLinkSocialMediaController_1 = require("./controllers/store/socialMedia/UpdateLinkSocialMediaController");
var UpdateImageRedeSocialController_1 = require("./controllers/store/socialMedia/UpdateImageRedeSocialController");
var UpdatePositionSocialMediaController_1 = require("./controllers/store/socialMedia/UpdatePositionSocialMediaController");
var UpdateStatusSocialMediaController_1 = require("./controllers/store/socialMedia/UpdateStatusSocialMediaController");
var DeleteSocialMediaController_1 = require("./controllers/store/socialMedia/DeleteSocialMediaController");
var ListAllSocialMediaController_1 = require("./controllers/store/socialMedia/ListAllSocialMediaController");
var FindUniqueSocialMediaController_1 = require("./controllers/store/socialMedia/FindUniqueSocialMediaController");
// -- ROUTES TEXTOS INSTITUCIONAIS --
var CreateInstitutionalTextController_1 = require("./controllers/store/institutionalText/CreateInstitutionalTextController");
var DeleteInstitutionalTextController_1 = require("./controllers/store/institutionalText/DeleteInstitutionalTextController");
var ListAllInstitutionalTextController_1 = require("./controllers/store/institutionalText/ListAllInstitutionalTextController");
var ListAllTextOrderAndPositionController_1 = require("./controllers/store/institutionalText/ListAllTextOrderAndPositionController");
var FindUniqueInstitutionalTextController_1 = require("./controllers/store/institutionalText/FindUniqueInstitutionalTextController");
var PageListInstitutionalTextController_1 = require("./controllers/store/institutionalText/PageListInstitutionalTextController");
var UpdateStatusInstitutionalTextController_1 = require("./controllers/store/institutionalText/UpdateStatusInstitutionalTextController");
var UpdateOrderInstitutionalTextController_1 = require("./controllers/store/institutionalText/UpdateOrderInstitutionalTextController");
var UpdatePositionInstitutionalTextController_1 = require("./controllers/store/institutionalText/UpdatePositionInstitutionalTextController");
var UpdateTitleInstitutionalTextController_1 = require("./controllers/store/institutionalText/UpdateTitleInstitutionalTextController");
var UpdateDescriptionInstitutionalTextController_1 = require("./controllers/store/institutionalText/UpdateDescriptionInstitutionalTextController");
// -- ROUTES IMAGE STORE
var CreateImageStoreController_1 = require("./controllers/store/imageStore/CreateImageStoreController");
var AllImageStoreController_1 = require("./controllers/store/imageStore/AllImageStoreController");
var DeleteImageStoreController_1 = require("./controllers/store/imageStore/DeleteImageStoreController");
var UpdateStatusImageStoreController_1 = require("./controllers/store/imageStore/UpdateStatusImageStoreController");
var FindUniqueImageStoreController_1 = require("./controllers/store/imageStore/FindUniqueImageStoreController");
var UpdateOrderImageStoreController_1 = require("./controllers/store/imageStore/UpdateOrderImageStoreController");
var ListAllImageStoreController_1 = require("./controllers/store/imageStore/ListAllImageStoreController");
var UpdateImageStoreController_1 = require("./controllers/store/imageStore/UpdateImageStoreController");
var UpdateTitleImageStoreController_1 = require("./controllers/store/imageStore/UpdateTitleImageStoreController");
var UpdatePositionImageStoreController_1 = require("./controllers/store/imageStore/UpdatePositionImageStoreController");
// -- ROUTES CATEGORY --
var CreateCategoryController_1 = require("./controllers/category/CreateCategoryController");
var UpdateNameCategoryController_1 = require("./controllers/category/UpdateNameCategoryController");
var UpdateImageCategoryController_1 = require("./controllers/category/imageCategory/UpdateImageCategoryController");
var CreateImageCategoryController_1 = require("./controllers/category/imageCategory/CreateImageCategoryController");
var UpdateStatusCategoryController_1 = require("./controllers/category/UpdateStatusCategoryController");
var ListCategoryNameController_1 = require("./controllers/category/ListCategoryNameController");
var PageListAllCategorysController_1 = require("./controllers/category/PageListAllCategorysController");
var ExactPageListAllCategoryController_1 = require("./controllers/category/ExactPageListAllCategoryController");
var FindFirstCategoryController_1 = require("./controllers/category/FindFirstCategoryController");
var ListCategoryController_1 = require("./controllers/category/ListCategoryController");
var FindUniqueCategoryController_1 = require("./controllers/category/FindUniqueCategoryController");
var FindFirstCategorySlugController_1 = require("./controllers/category/FindFirstCategorySlugController");
var UpdateDescriptionCategoryController_1 = require("./controllers/category/UpdateDescriptionCategoryController");
var UpdateOrderCategoryController_1 = require("./controllers/category/UpdateOrderCategoryController");
var FindParentIDCategoryController_1 = require("./controllers/category/FindParentIDCategoryController");
var DeleteImageCategoryController_1 = require("./controllers/category/imageCategory/DeleteImageCategoryController");
var ListAllCategoriesStorePageController_1 = require("./controllers/category/ListAllCategoriesStorePageController");
// -- ROUTES PRODUCT --
var CreateProductController_1 = require("./controllers/product/CreateProductController");
var CreatePhotoProductController_1 = require("./controllers/product/photoProduct/CreatePhotoProductController");
var UpdatePhotoProductController_1 = require("./controllers/product/photoProduct/UpdatePhotoProductController");
var UpdateAllDateProductController_1 = require("./controllers/product/UpdateAllDateProductController");
var AllPhotosProductController_1 = require("./controllers/product/photoProduct/AllPhotosProductController");
var AllPhotosController_1 = require("./controllers/product/photoProduct/AllPhotosController");
var AllProductController_1 = require("./controllers/product/AllProductController");
var AllProductInStoreController_1 = require("./controllers/product/AllProductInStoreController");
var FindFirstProductController_1 = require("./controllers/product/FindFirstProductController");
var UpdateStockProductController_1 = require("./controllers/product/UpdateStockProductController");
var AllProductExistController_1 = require("./controllers/product/AllProductExistController");
var PageListAllProductController_1 = require("./controllers/product/PageListAllProductController");
var ListExactProductController_1 = require("./controllers/product/ListExactProductController");
var DeletePhotoProductController_1 = require("./controllers/product/photoProduct/DeletePhotoProductController");
var DeleteAllPhotoProductController_1 = require("./controllers/product/photoProduct/DeleteAllPhotoProductController");
var DeleteProductController_1 = require("./controllers/product/DeleteProductController");
var UpdateNameProductController_1 = require("./controllers/product/UpdateNameProductController");
var ExportProductController_1 = require("./controllers/product/ExportProductController");
var UpdateStatusProductController_1 = require("./controllers/product/UpdateStatusProductController");
var UpdateProductEmphasisController_1 = require("./controllers/product/UpdateProductEmphasisController");
var UpdateProductOfferController_1 = require("./controllers/product/UpdateProductOfferController");
var UpdateOrderPhotoProductController_1 = require("./controllers/product/photoProduct/UpdateOrderPhotoProductController");
var AllPhotosProductInStoreController_1 = require("./controllers/product/photoProduct/AllPhotosProductInStoreController");
var ListAllProductEmphasisController_1 = require("./controllers/product/ListAllProductEmphasisController");
var ListAllProductOfferController_1 = require("./controllers/product/ListAllProductOfferController");
var UpdateProductFreeShippingController_1 = require("./controllers/product/UpdateProductFreeShippingController");
var ListExactProductNameController_1 = require("./controllers/product/ListExactProductNameController");
var AllPhotosProductPageController_1 = require("./controllers/product/photoProduct/AllPhotosProductPageController");
// -- ROUTES SEARCH --
var FilterController_1 = require("./controllers/search/FilterController");
var FilterPriceController_1 = require("./controllers/search/FilterPriceController");
var AllProductSearchController_1 = require("./controllers/search/AllProductSearchController");
var OrderProductsController_1 = require("./controllers/search/OrderProductsController");
var FavoritesProductsController_1 = require("./controllers/search/FavoritesProductsController");
// -- ROUTES CATEGORY AND PRODUCT --
var CreateProductCategoryController_1 = require("./controllers/product/productCategory/CreateProductCategoryController");
var UpdateOrderProductCategoryController_1 = require("./controllers/product/productCategory/UpdateOrderProductCategoryController");
var DeleteAllProductCategoryController_1 = require("./controllers/product/productCategory/DeleteAllProductCategoryController");
var PageRelationsCategorysController_1 = require("./controllers/product/productCategory/PageRelationsCategorysController");
var UpdateStatusCategoryProductController_1 = require("./controllers/product/productCategory/UpdateStatusCategoryProductController");
var UpdateNameProductCategoryController_1 = require("./controllers/product/productCategory/UpdateNameProductCategoryController");
var FindCategoryAndProductController_1 = require("./controllers/product/productCategory/FindCategoryAndProductController");
var DeleteProductCategoryController_1 = require("./controllers/product/productCategory/DeleteProductCategoryController");
var ProductsPageCategoriesController_1 = require("./controllers/product/productCategory/ProductsPageCategoriesController");
var FindAllRelationProductAndCategoryController_1 = require("./controllers/product/productCategory/FindAllRelationProductAndCategoryController");
var FindUniqueRelationProductCategoryController_1 = require("./controllers/product/productCategory/FindUniqueRelationProductCategoryController");
var ProductsCategoriesController_1 = require("./controllers/product/productCategory/ProductsCategoriesController");
var MainCategoryProductController_1 = require("./controllers/product/productCategory/MainCategoryProductController");
var FindMainCategoryProductController_1 = require("./controllers/product/productCategory/FindMainCategoryProductController");
var FindFirstProductCategoryController_1 = require("./controllers/product/productCategory/FindFirstProductCategoryController");
// -- ROUTES DESCRIPTION PRODUCT --
var FindUniqueDescriptionProductController_1 = require("./controllers/product/descriptionProduct/FindUniqueDescriptionProductController");
var CreateDescriptionProductController_1 = require("./controllers/product/descriptionProduct/CreateDescriptionProductController");
var UpdateTitleDescriptionProductController_1 = require("./controllers/product/descriptionProduct/UpdateTitleDescriptionProductController");
var AllDescriptionProductInStoreController_1 = require("./controllers/product/descriptionProduct/AllDescriptionProductInStoreController");
var AllDescriptionProductController_1 = require("./controllers/product/descriptionProduct/AllDescriptionProductController");
var AllDescriptionsController_1 = require("./controllers/product/descriptionProduct/AllDescriptionsController");
var DeleteAllDescriptionProductController_1 = require("./controllers/product/descriptionProduct/DeleteAllDescriptionProductController");
var DeleteDescriptionProductController_1 = require("./controllers/product/descriptionProduct/DeleteDescriptionProductController");
var UpdateOrderDescriptionProductController_1 = require("./controllers/product/descriptionProduct/UpdateOrderDescriptionProductController");
var UpdateDescriptionProductController_1 = require("./controllers/product/descriptionProduct/UpdateDescriptionProductController");
var UpdateStatusDescriptionProductController_1 = require("./controllers/product/descriptionProduct/UpdateStatusDescriptionProductController");
// -- ROUTES TAG --
var AllTagProductController_1 = require("./controllers/product/tag/AllTagProductController");
var AllTagController_1 = require("./controllers/product/tag/AllTagController");
var CreateTagController_1 = require("./controllers/product/tag/CreateTagController");
var UpdateTagController_1 = require("./controllers/product/tag/UpdateTagController");
var DeleteTagController_1 = require("./controllers/product/tag/DeleteTagController");
var DeleteAllTagController_1 = require("./controllers/product/tag/DeleteAllTagController");
var FindUniqueTagController_1 = require("./controllers/product/tag/FindUniqueTagController");
// -- ROUTES TYPE ATTRIBUTE --
var CreateTypeAttributeController_1 = require("./controllers/attribute/typeAttribute/CreateTypeAttributeController");
var UpdateTypeAttributeController_1 = require("./controllers/attribute/typeAttribute/UpdateTypeAttributeController");
var AllTypeAttributeController_1 = require("./controllers/attribute/typeAttribute/AllTypeAttributeController");
var FindUniqueTypeAttributeController_1 = require("./controllers/attribute/typeAttribute/FindUniqueTypeAttributeController");
// -- ROUTES VALUE ATTRIBUTE --
var UpdateValueAttributeController_1 = require("./controllers/attribute/valueAttribute/UpdateValueAttributeController");
var CreateValueAttributeController_1 = require("./controllers/attribute/valueAttribute/CreateValueAttributeController");
var UpdateTypeValueAttributeController_1 = require("./controllers/attribute/valueAttribute/UpdateTypeValueAttributeController");
var AllValuesTypeAttributeController_1 = require("./controllers/attribute/valueAttribute/AllValuesTypeAttributeController");
var UpdateValueOrderAttributeController_1 = require("./controllers/attribute/valueAttribute/UpdateValueOrderAttributeController");
var DeleteValueAttributeController_1 = require("./controllers/attribute/valueAttribute/DeleteValueAttributeController");
var FindUniqueValueAttributeController_1 = require("./controllers/attribute/valueAttribute/FindUniqueValueAttributeController");
var DeleteImageAttributeRelationIDController_1 = require("./controllers/attribute/valueAttribute/imageAttribute/DeleteImageAttributeRelationIDController");
var ValuesAttributeController_1 = require("./controllers/attribute/valueAttribute/ValuesAttributeController");
// -- ROUTES RELATION ATTRIBUTE AND PRODUCT --
var CreateRelationAttributeProductController_1 = require("./controllers/product/relationAttributeProduct/CreateRelationAttributeProductController");
var DeleteProductRelationAllController_1 = require("./controllers/product/relationAttributeProduct/DeleteProductRelationAllController");
var DeleteRelationAttributeProductController_1 = require("./controllers/product/relationAttributeProduct/DeleteRelationAttributeProductController");
var FindUniqueRelationAttributeProductController_1 = require("./controllers/product/relationAttributeProduct/FindUniqueRelationAttributeProductController");
var FirstFirstRelationAttributeProductController_1 = require("./controllers/product/relationAttributeProduct/FirstFirstRelationAttributeProductController");
var PageRelationAttributeProductController_1 = require("./controllers/product/relationAttributeProduct/PageRelationAttributeProductController");
var AllProductAttributeController_1 = require("./controllers/product/relationAttributeProduct/AllProductAttributeController");
var UpdateOrderRelationAttributeProductController_1 = require("./controllers/product/relationAttributeProduct/UpdateOrderRelationAttributeProductController");
var UpdateStatusRelationAttributeProductController_1 = require("./controllers/product/relationAttributeProduct/UpdateStatusRelationAttributeProductController");
var CreateImageAttributeController_1 = require("./controllers/attribute/valueAttribute/imageAttribute/CreateImageAttributeController");
var UpdateImageAttributeController_1 = require("./controllers/attribute/valueAttribute/imageAttribute/UpdateImageAttributeController");
var DeleteImageAttributeController_1 = require("./controllers/attribute/valueAttribute/imageAttribute/DeleteImageAttributeController");
var FindUniqueImageAttributeController_1 = require("./controllers/attribute/valueAttribute/imageAttribute/FindUniqueImageAttributeController");
var ProductsAndAttributeController_1 = require("./controllers/product/relationAttributeProduct/ProductsAndAttributeController");
var ProductAttributeController_1 = require("./controllers/product/relationAttributeProduct/ProductAttributeController");
var UpdateValueRelationAttributeProductController_1 = require("./controllers/product/relationAttributeProduct/UpdateValueRelationAttributeProductController");
var UpdateTypeRelationAttributeProductController_1 = require("./controllers/product/relationAttributeProduct/UpdateTypeRelationAttributeProductController");
// -- ROUTES AVALIETION --
var CreateAvalietionController_1 = require("./controllers/avalietion/CreateAvalietionController");
var DeleteAvalietionController_1 = require("./controllers/avalietion/DeleteAvalietionController");
var UpdateStatusAvalietionController_1 = require("./controllers/avalietion/UpdateStatusAvalietionController");
var PageListAllAvalietionController_1 = require("./controllers/avalietion/PageListAllAvalietionController");
var DeleteAvalietionProductIDController_1 = require("./controllers/avalietion/DeleteAvalietionProductIDController");
var PageListAllAvalietionProductIDController_1 = require("./controllers/avalietion/PageListAllAvalietionProductIDController");
var FindUniqueAvalietionController_1 = require("./controllers/avalietion/FindUniqueAvalietionController");
var PageAvalietionStoreProductIDController_1 = require("./controllers/avalietion/PageAvalietionStoreProductIDController");
// -- ROUTES VARIATION --
var AllVariationProductController_1 = require("./controllers/variation/AllVariationProductController");
var CreateVariationController_1 = require("./controllers/variation/CreateVariationController");
var FindFirstVariationNameController_1 = require("./controllers/variation/FindFirstVariationNameController");
var DeleteAllVariationProductController_1 = require("./controllers/variation/DeleteAllVariationProductController");
var DeleteVariationController_1 = require("./controllers/variation/DeleteVariationController");
var FindUniqueVariationController_1 = require("./controllers/variation/FindUniqueVariationController");
var UpdateStatusVariationController_1 = require("./controllers/variation/UpdateStatusVariationController");
var PageListAllVariationController_1 = require("./controllers/variation/PageListAllVariationController");
var UpdateNameVariationController_1 = require("./controllers/variation/UpdateNameVariationController");
var UpdateOrderVariacaoController_1 = require("./controllers/variation/UpdateOrderVariacaoController");
var AllVariationImageController_1 = require("./controllers/variation/photoVariation/AllVariationImageController");
var AllImagesVariationController_1 = require("./controllers/variation/photoVariation/AllImagesVariationController");
var DeleteALLImageVariationProductController_1 = require("./controllers/variation/photoVariation/DeleteALLImageVariationProductController");
var DeleteImageVariationController_1 = require("./controllers/variation/photoVariation/DeleteImageVariationController");
var CreateImageVariationController_1 = require("./controllers/variation/photoVariation/CreateImageVariationController");
var UpdateOrderImageVariationController_1 = require("./controllers/variation/photoVariation/UpdateOrderImageVariationController");
var FindUniqueImageVariationController_1 = require("./controllers/variation/photoVariation/FindUniqueImageVariationController");
var CreateProductVariationController_1 = require("./controllers/variation/productVariation/CreateProductVariationController");
var DeleteProductVariationController_1 = require("./controllers/variation/productVariation/DeleteProductVariationController");
var VariationDeleteController_1 = require("./controllers/variation/productVariation/VariationDeleteController");
var FindFirstProductVariationController_1 = require("./controllers/variation/productVariation/FindFirstProductVariationController");
var FindUniqueProductVariationController_1 = require("./controllers/variation/productVariation/FindUniqueProductVariationController");
var UpdateStatusProductVariationController_1 = require("./controllers/variation/productVariation/UpdateStatusProductVariationController");
var UpdateNameProductVariationController_1 = require("./controllers/variation/productVariation/UpdateNameProductVariationController");
var UpdateOrderProductVariationController_1 = require("./controllers/variation/productVariation/UpdateOrderProductVariationController");
// -- ROUTES BUY TOGETHER --
var CreateBuyTogetherController_1 = require("./controllers/buyTogether/CreateBuyTogetherController");
var UpdateProductBuyTogetherController_1 = require("./controllers/buyTogether/UpdateProductBuyTogetherController");
var UpdateNameGroupBuyTogetherController_1 = require("./controllers/buyTogether/UpdateNameGroupBuyTogetherController");
var UpdateOrderBuyTogetherController_1 = require("./controllers/buyTogether/UpdateOrderBuyTogetherController");
var UpdateStatusBuyTogetherController_1 = require("./controllers/buyTogether/UpdateStatusBuyTogetherController");
var DeleteBuyTogetherController_1 = require("./controllers/buyTogether/DeleteBuyTogetherController");
var FindUniqueBuyTogetherController_1 = require("./controllers/buyTogether/FindUniqueBuyTogetherController");
var AllBuyTogetherController_1 = require("./controllers/buyTogether/AllBuyTogetherController");
var FindGroupBuyTogetherIDController_1 = require("./controllers/buyTogether/FindGroupBuyTogetherIDController");
var FindFirstBuyTogetherController_1 = require("./controllers/buyTogether/FindFirstBuyTogetherController");
var DeleteGroupBuyTogetherController_1 = require("./controllers/buyTogether/DeleteGroupBuyTogetherController");
var ProductIDBuyTogetherController_1 = require("./controllers/buyTogether/ProductIDBuyTogetherController");
var DeleteBuyTogetherAllProductController_1 = require("./controllers/buyTogether/DeleteBuyTogetherAllProductController");
var FindBuyTogetherIDController_1 = require("./controllers/buyTogether/FindBuyTogetherIDController");
// -- ROUTES COUNTERPROPOSAL --
var CreateCounterProposalController_1 = require("./controllers/counterproposal/CreateCounterProposalController");
var PageCounterProposalController_1 = require("./controllers/counterproposal/PageCounterProposalController");
var FindUniqueCounterProposalController_1 = require("./controllers/counterproposal/FindUniqueCounterProposalController");
var CounterProposalController_1 = require("./controllers/counterproposal/CounterProposalController");
// -- ROUTES STOCK PRODUCT CUSTOMER --
var CreateStockProductCustomerController_1 = require("./controllers/stockproductcustomer/CreateStockProductCustomerController");
var StockProductCustomerController_1 = require("./controllers/stockproductcustomer/StockProductCustomerController");
// -- ROUTES MENU CATEGORY --
var CreateMenuCategoryController_1 = require("./controllers/category/menuCategory/CreateMenuCategoryController");
var ListPositionMenuCategoryController_1 = require("./controllers/category/menuCategory/ListPositionMenuCategoryController");
var ListCategoryMenuController_1 = require("./controllers/category/menuCategory/ListCategoryMenuController");
var PageListAllMenuCategoryController_1 = require("./controllers/category/menuCategory/PageListAllMenuCategoryController");
var FindFirstMenuController_1 = require("./controllers/category/menuCategory/FindFirstMenuController");
var FindMenuIDController_1 = require("./controllers/category/menuCategory/FindMenuIDController");
var FindUniqueMenuIDController_1 = require("./controllers/category/menuCategory/FindUniqueMenuIDController");
var UpdateOrderCategoryMenuController_1 = require("./controllers/category/menuCategory/UpdateOrderCategoryMenuController");
var StatusCategoryMenuCategoriesController_1 = require("./controllers/category/menuCategory/StatusCategoryMenuCategoriesController");
var DeleteMenuCategoryMenuIDController_1 = require("./controllers/category/menuCategory/DeleteMenuCategoryMenuIDController");
var DeleteMenuIDController_1 = require("./controllers/category/menuCategory/DeleteMenuIDController");
var UpdateNameMenuController_1 = require("./controllers/category/menuCategory/UpdateNameMenuController");
var UpdatePositionMenuController_1 = require("./controllers/category/menuCategory/UpdatePositionMenuController");
var UpdateNameCategoryMenuController_1 = require("./controllers/category/menuCategory/UpdateNameCategoryMenuController");
var CreateImageMenuCategoryController_1 = require("./controllers/category/menuCategory/imageMenuCategory/CreateImageMenuCategoryController");
var UpdateItemNameCategoryController_1 = require("./controllers/category/menuCategory/UpdateItemNameCategoryController");
var UpdateSlugMenuController_1 = require("./controllers/category/menuCategory/UpdateSlugMenuController");
var UpdateImageMenuCategoryController_1 = require("./controllers/category/menuCategory/imageMenuCategory/UpdateImageMenuCategoryController");
var DeletetImageMenuCategoryController_1 = require("./controllers/category/menuCategory/imageMenuCategory/DeletetImageMenuCategoryController");
var AllCategoriesMenuController_1 = require("./controllers/category/menuCategory/AllCategoriesMenuController");
var MenuCategoryController_1 = require("./controllers/category/menuCategory/MenuCategoryController");
// -- ROUTES GROUP FILTERS --
var CreateGroupFilterController_1 = require("./controllers/groupFilter/CreateGroupFilterController");
var UpdateNameGroupFilterController_1 = require("./controllers/groupFilter/UpdateNameGroupFilterController");
var UpdateSlugGroupFilterController_1 = require("./controllers/groupFilter/UpdateSlugGroupFilterController");
var UpdateStatusGroupFilterController_1 = require("./controllers/groupFilter/UpdateStatusGroupFilterController");
var PageGroupsFiltersController_1 = require("./controllers/groupFilter/PageGroupsFiltersController");
var FindsNameGroupFilterController_1 = require("./controllers/groupFilter/FindsNameGroupFilterController");
var FindTypeFilterController_1 = require("./controllers/groupFilter/FindTypeFilterController");
var DeleteGroupFilterController_1 = require("./controllers/groupFilter/DeleteGroupFilterController");
var FindSlugGroupFilterController_1 = require("./controllers/groupFilter/FindSlugGroupFilterController");
var FindFirstGroupsController_1 = require("./controllers/groupFilter/FindFirstGroupsController");
var FindIDGroupFilterController_1 = require("./controllers/groupFilter/FindIDGroupFilterController");
var UpdateTypeAttributeGroupController_1 = require("./controllers/groupFilter/UpdateTypeAttributeGroupController");
// -- ROUTES FILTER ATTRIBUTES --
var CreateFilterAttributeController_1 = require("./controllers/groupFilter/filterAttribute/CreateFilterAttributeController");
var DeleteAllFilterAttributeController_1 = require("./controllers/groupFilter/filterAttribute/DeleteAllFilterAttributeController");
var PageFilterAttributeController_1 = require("./controllers/groupFilter/filterAttribute/PageFilterAttributeController");
var UpdateNameFilterAttributeController_1 = require("./controllers/groupFilter/filterAttribute/UpdateNameFilterAttributeController");
var UpdateValueFilterAttributeController_1 = require("./controllers/groupFilter/filterAttribute/UpdateValueFilterAttributeController");
var UpdateOrderFilterAttributeController_1 = require("./controllers/groupFilter/filterAttribute/UpdateOrderFilterAttributeController");
var UpdateStatusFilterAttributeController_1 = require("./controllers/groupFilter/filterAttribute/UpdateStatusFilterAttributeController");
var CreateImageFilterAttributeController_1 = require("./controllers/groupFilter/filterAttribute/imageFilterAtributo/CreateImageFilterAttributeController");
var UpdateImageFilterAttributeController_1 = require("./controllers/groupFilter/filterAttribute/imageFilterAtributo/UpdateImageFilterAttributeController");
var FindFilterAttributeController_1 = require("./controllers/groupFilter/filterAttribute/FindFilterAttributeController");
var FindUniqueFilterAttributeController_1 = require("./controllers/groupFilter/filterAttribute/FindUniqueFilterAttributeController");
var FindManyFilterAttributeNameController_1 = require("./controllers/groupFilter/filterAttribute/FindManyFilterAttributeNameController");
var DeleteFilterAttributeController_1 = require("./controllers/groupFilter/filterAttribute/DeleteFilterAttributeController");
// -- ROUTES FILTER CATEGORY --
var CreateFilterCategoryController_1 = require("./controllers/groupFilter/filterCategory/CreateFilterCategoryController");
var DeleteFilterCategoryController_1 = require("./controllers/groupFilter/filterCategory/DeleteFilterCategoryController");
var FindManyFilterCategoryNameController_1 = require("./controllers/groupFilter/filterCategory/FindManyFilterCategoryNameController");
var FindUniqueFilterCategoryController_1 = require("./controllers/groupFilter/filterCategory/FindUniqueFilterCategoryController");
var PageFilterCategoryController_1 = require("./controllers/groupFilter/filterCategory/PageFilterCategoryController");
var UpdateNameFilterGroupController_1 = require("./controllers/groupFilter/filterCategory/UpdateNameFilterGroupController");
var UpdateCategoryNameFilterCategoryController_1 = require("./controllers/groupFilter/filterCategory/UpdateCategoryNameFilterCategoryController");
var UpdateStatusFilterCategoryController_1 = require("./controllers/groupFilter/filterCategory/UpdateStatusFilterCategoryController");
var UpdateCategoryOrderFilterController_1 = require("./controllers/groupFilter/filterCategory/UpdateCategoryOrderFilterController");
var DeleteImageFilterAttributeController_1 = require("./controllers/groupFilter/filterAttribute/imageFilterAtributo/DeleteImageFilterAttributeController");
var CreateImageFilterCategoryController_1 = require("./controllers/groupFilter/filterCategory/imageFilterCategory/CreateImageFilterCategoryController");
var UpdateImageFilterCategoryController_1 = require("./controllers/groupFilter/filterCategory/imageFilterCategory/UpdateImageFilterCategoryController");
var DeleteImageFilterCategoryController_1 = require("./controllers/groupFilter/filterCategory/imageFilterCategory/DeleteImageFilterCategoryController");
// -- ROUTES BANNERS --
var CreateBannerController_1 = require("./controllers/banner/CreateBannerController");
var UpdateAllDateBannerController_1 = require("./controllers/banner/UpdateAllDateBannerController");
var PageListAllBannerController_1 = require("./controllers/banner/PageListAllBannerController");
var DeleteBannerController_1 = require("./controllers/banner/DeleteBannerController");
var UpdateBannerController_1 = require("./controllers/banner/UpdateBannerController");
var PublishProgramadBannerController_1 = require("./controllers/banner/PublishProgramadBannerController");
var StatusBannerController_1 = require("./controllers/banner/StatusBannerController");
var ActiveAllBannerController_1 = require("./controllers/banner/ActiveAllBannerController");
var ListExactBannerController_1 = require("./controllers/banner/ListExactBannerController");
var UpdatePosicaoBannerController_1 = require("./controllers/banner/UpdatePosicaoBannerController");
// -- ROUTES NEWSLETTERS --
var CreateNewslettersController_1 = require("./controllers/newsletters/CreateNewslettersController");
var DeleteNewslettersController_1 = require("./controllers/newsletters/DeleteNewslettersController");
var ListNewslettersController_1 = require("./controllers/newsletters/ListNewslettersController");
var ListExactNewslettersController_1 = require("./controllers/newsletters/ListExactNewslettersController");
var PageListAllNewslettersController_1 = require("./controllers/newsletters/PageListAllNewslettersController");
var ExportNewslettersController_1 = require("./controllers/newsletters/ExportNewslettersController");
// -- ROUTES CONTACT --
var CreateContactController_1 = require("./controllers/contact/CreateContactController");
var DeleteContactController_1 = require("./controllers/contact/DeleteContactController");
var ListContactController_1 = require("./controllers/contact/ListContactController");
var FindUniqueContactController_1 = require("./controllers/contact/FindUniqueContactController");
var PageListAllContactController_1 = require("./controllers/contact/PageListAllContactController");
var ExportContactController_1 = require("./controllers/contact/ExportContactController");
// -- ROUTES SEND EMAILS --
var EmailExportAdminUserController_1 = require("./controllers/sendEmails/EmailExportAdminUserController");
var EmailExportCustomerUserController_1 = require("./controllers/sendEmails/EmailExportCustomerUserController");
var EmailExportProductsController_1 = require("./controllers/sendEmails/EmailExportProductsController");
var EmailExportNewslettersController_1 = require("./controllers/sendEmails/EmailExportNewslettersController");
var EmailExportContactController_1 = require("./controllers/sendEmails/EmailExportContactController");
var ADMINisAuthenticated_1 = require("./middlewares/ADMINisAuthenticated");
var EMPLOYEEisAuthenticated_1 = require("./middlewares/EMPLOYEEisAuthenticated");
var isAuthenticated_1 = require("./middlewares/isAuthenticated");
var multer_2 = require("./config/multer");
var router = express_1.Router();
exports.router = router;
var upload = multer_1["default"](multer_2["default"].upload("./images"));
// -- ROUTES ADMIN --
router.put('/admin/activeOrDesactiveAdmin', ADMINisAuthenticated_1.ADMINisAuthenticated, new ActiveOrDesactiveAdminController_1.ActiveOrDesactiveAdminController().handle);
router.post('/admin/createAdmin', new AdminCreateController_1.AdminCreateController().handle);
router.post('/admin/createEmployee', new EmployeCreateController_1.EmployeCreateController().handle);
router.put('/admin/updateRoleAdmin', ADMINisAuthenticated_1.ADMINisAuthenticated, new AdminRoleController_1.AdminRoleController().handle);
router.post('/admin/session', new AuthAdminController_1.AuthAdminController().handle);
router.put('/admin/authenticatedEmailAdmin', new AuthenticatedEmailAdminController_1.AuthenticatedEmailAdminController().handle);
router["delete"]('/admin/deleteAdminUser', ADMINisAuthenticated_1.ADMINisAuthenticated, new DeleteAdminOrEmployeController_1.DeleteAdminOrEmployeController().handle);
router.get('/admin/me', ADMINisAuthenticated_1.ADMINisAuthenticated && EMPLOYEEisAuthenticated_1.EMPLOYEEisAuthenticated, new DetailAdminController_1.DetailAdminController().handle);
router.get('/admin/exportAdmins', ADMINisAuthenticated_1.ADMINisAuthenticated, new ExportAdminController_1.ExportAdminController().handle);
router.get('/admin/listExactAdminName', ADMINisAuthenticated_1.ADMINisAuthenticated, new ListExactAdminNameController_1.ListExactAdminNameController().handle);
router.get('/admin/listExactAdminID', ADMINisAuthenticated_1.ADMINisAuthenticated && EMPLOYEEisAuthenticated_1.EMPLOYEEisAuthenticated, new ListExactAdminController_1.ListExactAdminController().handle);
router.get('/admin/listForPageEmployes', ADMINisAuthenticated_1.ADMINisAuthenticated, new PageListAllAdminsController_1.PageListAllAdminsController().handle);
router.put('/admin/updateDateAdmin', ADMINisAuthenticated_1.ADMINisAuthenticated && EMPLOYEEisAuthenticated_1.EMPLOYEEisAuthenticated, new UpdateAllDateAdminController_1.UpdateAllDateAdminController().handle);
router.put('/admin/updateRoleEmployee', ADMINisAuthenticated_1.ADMINisAuthenticated, new AdminRoleEmployeeController_1.AdminRoleEmployeeController().handle);
router.put('/admin/updateNameAdminOrEmployee', ADMINisAuthenticated_1.ADMINisAuthenticated && EMPLOYEEisAuthenticated_1.EMPLOYEEisAuthenticated, new AdminUpdateNameController_1.AdminUpdateNameController().handle);
router["delete"]('/admin/deleteRecoveryIDAdmin', ADMINisAuthenticated_1.ADMINisAuthenticated && EMPLOYEEisAuthenticated_1.EMPLOYEEisAuthenticated, new DeleteAdminPasswordRecoveryIDController_1.DeleteAdminPasswordRecoveryIDController().handle);
router.get('/admin/findFirstAdmin', ADMINisAuthenticated_1.ADMINisAuthenticated && EMPLOYEEisAuthenticated_1.EMPLOYEEisAuthenticated, new FindAdminRecoveryIDController_1.FindAdminRecoveryIDController().handle);
router.post('/admin/recoverPasswordDashboard', ADMINisAuthenticated_1.ADMINisAuthenticated && EMPLOYEEisAuthenticated_1.EMPLOYEEisAuthenticated, new EmailPasswordDashboardController_1.EmailPasswordDashboardController().handle);
router.get('/admin/getSuperAdmin', new ListSuperAdminController_1.ListSuperAdminController().handle);
router.post('/admin/recoverPasswordEmail', new EmailPasswordController_1.EmailPasswordController().handle);
router.put('/admin/recoverAdmin', new RecoveryPasswordAdminController_1.RecoveryPasswordAdminController().handle);
// -- ROUTES CUSTOMERS --
router.post('/customer/createCustomer', new CreateCustomerController_1.CreateCustomerController().handle);
router.put('/customer/activeOrDesactiveCustomer', isAuthenticated_1.isAuthenticated, new ActiveOrDesactiveCustomerController_1.ActiveOrDesactiveCustomerController().handle);
router.post('/customer/session', new AuthCustomerController_1.AuthCustomerController().handle);
router["delete"]('/customer/deleteCustomer', ADMINisAuthenticated_1.ADMINisAuthenticated && isAuthenticated_1.isAuthenticated, new DeleteCustomerController_1.DeleteCustomerController().handle);
router.get('/customer/me', ADMINisAuthenticated_1.ADMINisAuthenticated && isAuthenticated_1.isAuthenticated, new DetailCustomerController_1.DetailCustomerController().handle);
router.get('/customer/exportCustomer', ADMINisAuthenticated_1.ADMINisAuthenticated, new ExportCustomerController_1.ExportCustomerController().handle);
router.get('/customer/listExactCustomerName', ADMINisAuthenticated_1.ADMINisAuthenticated && isAuthenticated_1.isAuthenticated, new ListExactCustomerNameController_1.ListExactCustomerNameController().handle);
router.get('/customer/listExactCustomerID', ADMINisAuthenticated_1.ADMINisAuthenticated && isAuthenticated_1.isAuthenticated, new ListExactCustomerController_1.ListExactCustomerController().handle);
router.get('/customer/listForPageCustomer', ADMINisAuthenticated_1.ADMINisAuthenticated, new PageListAllCustomerController_1.PageListAllCustomerController().handle);
router.put('/customer/updateDateCustomer', ADMINisAuthenticated_1.ADMINisAuthenticated && isAuthenticated_1.isAuthenticated, new UpdateAllDateCustomerController_1.UpdateAllDateCustomerController().handle);
router.put('/customer/updateNameCustomer', ADMINisAuthenticated_1.ADMINisAuthenticated && isAuthenticated_1.isAuthenticated, new CustomerUpdateNameController_1.CustomerUpdateNameController().handle);
router.put('/customer/updateNewslatter', ADMINisAuthenticated_1.ADMINisAuthenticated && isAuthenticated_1.isAuthenticated, new CustomerUpdateNewslatterController_1.CustomerUpdateNewslatterController().handle);
router["delete"]('/customer/deleteRecoveryIDCustomer', isAuthenticated_1.isAuthenticated, new DeletePasswordRecoveryIDCustomerController_1.DeletePasswordRecoveryIDCustomerController().handle);
router.get('/customer/findFirstCustomer', ADMINisAuthenticated_1.ADMINisAuthenticated && isAuthenticated_1.isAuthenticated, new FindRecoveryIDCustomerController_1.FindRecoveryIDCustomerController().handle);
router.post('/customer/delivery/createDeliveryAddress', isAuthenticated_1.isAuthenticated, new CreateDeliveryAddressCustomerController_1.CreateDeliveryAddressCustomerController().handle);
router.put('/customer/delivery/updateAllDateDeliveryAddressCustomer', isAuthenticated_1.isAuthenticated, new UpdateAllDateDeliveryAddressCustomerCustomerController_1.UpdateAllDateDeliveryAddressCustomerCustomerController().handle);
router["delete"]('/customer/delivery/deleteDeliveryAddress', isAuthenticated_1.isAuthenticated, new DeleteDeliveryAddressCustomerController_1.DeleteDeliveryAddressCustomerController().handle);
router.post('/customer/recoverPasswordDashboard', isAuthenticated_1.isAuthenticated, new EmailPasswordDashboardCustomerController_1.EmailPasswordDashboardCustomerController().handle);
router.put('/customer/recoverCustomer', new CustomerRecoveryPasswordController_1.CustomerRecoveryPasswordController().handle);
router.post('/customer/recoverPasswordEmail', new EmailPasswordCustomerController_1.EmailPasswordCustomerController().handle);
// -- ROUTES STORE --
router.post('/createStore', ADMINisAuthenticated_1.ADMINisAuthenticated, upload.single('file'), new CreateStoreController_1.CreateStoreController().handle);
router.get('/userStore', ADMINisAuthenticated_1.ADMINisAuthenticated, new FindUniqueStoreController_1.FindUniqueStoreController().handle);
router.get('/findFirstStoreUser', ADMINisAuthenticated_1.ADMINisAuthenticated, new FindFirstStoreController_1.FindFirstStoreController().handle);
router.get('/store', new StoreController_1.StoreController().handle);
router["delete"]('/deleteStore', ADMINisAuthenticated_1.ADMINisAuthenticated, new DeleteStoreController_1.DeleteStoreController().handle);
router.put('/logoStoreUpdate', ADMINisAuthenticated_1.ADMINisAuthenticated, upload.single('file'), new UpdateLogoStoreController_1.UpdateLogoStoreController().handle);
router.put('/updateAllDateStore', ADMINisAuthenticated_1.ADMINisAuthenticated, new UpdateAllDateStoreController_1.UpdateAllDateStoreController().handle);
// -- ROUTES SOCIAL MEDIA --
router.post('/createSocialMedia', ADMINisAuthenticated_1.ADMINisAuthenticated, upload.single('file'), new CreateSocialMediaController_1.CreateSocialMediaController().handle);
router.put('/updateOrderSocialMedia', ADMINisAuthenticated_1.ADMINisAuthenticated, new UpdateOrderSocialMediaController_1.UpdateOrderSocialMediaController().handle);
router.put('/updateSocialMediaName', ADMINisAuthenticated_1.ADMINisAuthenticated, new UpdateSocialMediaNameController_1.UpdateSocialMediaNameController().handle);
router.put('/updateLinkSocialMedia', ADMINisAuthenticated_1.ADMINisAuthenticated, new UpdateLinkSocialMediaController_1.UpdateLinkSocialMediaController().handle);
router.put('/updateImageSocialMedia', ADMINisAuthenticated_1.ADMINisAuthenticated, upload.single('file'), new UpdateImageRedeSocialController_1.UpdateImageRedeSocialController().handle);
router.put('/updatePositionSocialMedia', ADMINisAuthenticated_1.ADMINisAuthenticated, new UpdatePositionSocialMediaController_1.UpdatePositionSocialMediaController().handle);
router.put('/updateStatusSocialMedia', ADMINisAuthenticated_1.ADMINisAuthenticated, new UpdateStatusSocialMediaController_1.UpdateStatusSocialMediaController().handle);
router["delete"]('/deleteSocialMedia', ADMINisAuthenticated_1.ADMINisAuthenticated, new DeleteSocialMediaController_1.DeleteSocialMediaController().handle);
router.get('/findUniqueSocialMedia', ADMINisAuthenticated_1.ADMINisAuthenticated, new FindUniqueSocialMediaController_1.FindUniqueSocialMediaController().handle);
router.get('/listAllSocialMedia', new ListAllSocialMediaController_1.ListAllSocialMediaController().handle);
router.get('/listSocialMediaOrder', new ListAllSocialMediaOrderAndPositionController_1.ListAllSocialMediaOrderAndPositionController().handle);
// -- ROUTES TEXT INSTITUTIONAL --
router.post('/createInstitutionalText', ADMINisAuthenticated_1.ADMINisAuthenticated, new CreateInstitutionalTextController_1.CreateInstitutionalTextController().handle);
router["delete"]('/deleteInstitutionalText', ADMINisAuthenticated_1.ADMINisAuthenticated, new DeleteInstitutionalTextController_1.DeleteInstitutionalTextController().handle);
router.get('/findUniqueInstitutionalText', ADMINisAuthenticated_1.ADMINisAuthenticated, new FindUniqueInstitutionalTextController_1.FindUniqueInstitutionalTextController().handle);
router.get('/listAllText', ADMINisAuthenticated_1.ADMINisAuthenticated, new ListAllInstitutionalTextController_1.ListAllInstitutionalTextController().handle);
router.get('/pageListInstitutionalText', ADMINisAuthenticated_1.ADMINisAuthenticated, new PageListInstitutionalTextController_1.PageListInstitutionalTextController().handle);
router.put('/updateStatusInstitutionalText', ADMINisAuthenticated_1.ADMINisAuthenticated, new UpdateStatusInstitutionalTextController_1.UpdateStatusInstitutionalTextController().handle);
router.put('/updateOrderInstitutionalText', ADMINisAuthenticated_1.ADMINisAuthenticated, new UpdateOrderInstitutionalTextController_1.UpdateOrderInstitutionalTextController().handle);
router.put('/updatePositionInstitutionalText', ADMINisAuthenticated_1.ADMINisAuthenticated, new UpdatePositionInstitutionalTextController_1.UpdatePositionInstitutionalTextController().handle);
router.put('/updateTitleInstitutionalText', ADMINisAuthenticated_1.ADMINisAuthenticated, new UpdateTitleInstitutionalTextController_1.UpdateTitleInstitutionalTextController().handle);
router.put('/updateDescriptionInstitutionalText', ADMINisAuthenticated_1.ADMINisAuthenticated, new UpdateDescriptionInstitutionalTextController_1.UpdateDescriptionInstitutionalTextController().handle);
router.get('/listInstitutionalText', new ListAllTextOrderAndPositionController_1.ListAllTextOrderAndPositionController().handle);
// -- ROUTES IMAGE STORE --
router.post('/createImageStore', ADMINisAuthenticated_1.ADMINisAuthenticated, upload.single('file'), new CreateImageStoreController_1.CreateImageStoreController().handle);
router.get('/allImagesStore', ADMINisAuthenticated_1.ADMINisAuthenticated, new AllImageStoreController_1.AllImageStoreController().handle);
router["delete"]('/deleteImageStore', ADMINisAuthenticated_1.ADMINisAuthenticated, new DeleteImageStoreController_1.DeleteImageStoreController().handle);
router.put('/updateImageStore', ADMINisAuthenticated_1.ADMINisAuthenticated, upload.single('file'), new UpdateImageStoreController_1.UpdateImageStoreController().handle);
router.put('/updateTitleImageStore', ADMINisAuthenticated_1.ADMINisAuthenticated, new UpdateTitleImageStoreController_1.UpdateTitleImageStoreController().handle);
router.put('/updateOrderImageStore', ADMINisAuthenticated_1.ADMINisAuthenticated, new UpdateOrderImageStoreController_1.UpdateOrderImageStoreController().handle);
router.put('/updateStatusImageStore', ADMINisAuthenticated_1.ADMINisAuthenticated, new UpdateStatusImageStoreController_1.UpdateStatusImageStoreController().handle);
router.put('/updatePositionImageTextoInstitucional', ADMINisAuthenticated_1.ADMINisAuthenticated, new UpdatePositionImageStoreController_1.UpdatePositionImageStoreController().handle);
router.get('/findUniqueImageStore', ADMINisAuthenticated_1.ADMINisAuthenticated, new FindUniqueImageStoreController_1.FindUniqueImageStoreController().handle);
router.get('/listImagesStore', new ListAllImageStoreController_1.ListAllImageStoreController().handle);
// -- ROUTES CATEGORY --
router.post('/createCategory', ADMINisAuthenticated_1.ADMINisAuthenticated, new CreateCategoryController_1.CreateCategoryController().handle);
router.post('/createImageCategory', ADMINisAuthenticated_1.ADMINisAuthenticated, upload.single('file'), new CreateImageCategoryController_1.CreateImageCategoryController().handle);
router.put('/categoryNameUpdate', ADMINisAuthenticated_1.ADMINisAuthenticated, new UpdateNameCategoryController_1.UpdateNameCategoryController().handle);
router.put('/updateDescription', ADMINisAuthenticated_1.ADMINisAuthenticated, new UpdateDescriptionCategoryController_1.UpdateDescriptionCategoryController().handle);
router.put('/updateStatusCategory', ADMINisAuthenticated_1.ADMINisAuthenticated, new UpdateStatusCategoryController_1.UpdateStatusCategoryController().handle);
router.put('/updateOrderCategory', ADMINisAuthenticated_1.ADMINisAuthenticated, new UpdateOrderCategoryController_1.UpdateOrderCategoryController().handle);
router.put('/updateImageCategory', ADMINisAuthenticated_1.ADMINisAuthenticated, upload.single('file'), new UpdateImageCategoryController_1.UpdateImageCategoryController().handle);
router.get('/allCategorysPage', ADMINisAuthenticated_1.ADMINisAuthenticated, new PageListAllCategorysController_1.PageListAllCategorysController().handle);
router.get('/exactCategoryPage', ADMINisAuthenticated_1.ADMINisAuthenticated, new ExactPageListAllCategoryController_1.ExactPageListAllCategoryController().handle);
router.get('/findFirstCategory', ADMINisAuthenticated_1.ADMINisAuthenticated, new FindFirstCategoryController_1.FindFirstCategoryController().handle);
router.get('/parentIDCategoryAll', ADMINisAuthenticated_1.ADMINisAuthenticated, new FindParentIDCategoryController_1.FindParentIDCategoryController().handle);
router.get('/finduniqueCategory', ADMINisAuthenticated_1.ADMINisAuthenticated, new FindUniqueCategoryController_1.FindUniqueCategoryController().handle);
router.get('/findCategorys', ADMINisAuthenticated_1.ADMINisAuthenticated, new ListCategoryNameController_1.ListCategoryNameController().handle);
router["delete"]('/deleteImageCategory', ADMINisAuthenticated_1.ADMINisAuthenticated, new DeleteImageCategoryController_1.DeleteImageCategoryController().handle);
router.get('/listCategorysDisponivel', new ListCategoryController_1.ListCategoryController().handle);
router.get('/findDateSlugCategory', new FindFirstCategorySlugController_1.FindFirstCategorySlugController().handle);
router.get('/categoriesInPageCategory', new ListAllCategoriesStorePageController_1.ListAllCategoriesStorePageController().handle);
// -- ROUTES PRODUCT --
router.post('/createProduct', ADMINisAuthenticated_1.ADMINisAuthenticated, new CreateProductController_1.CreateProductController().handle);
router.post('/imageProduct', ADMINisAuthenticated_1.ADMINisAuthenticated, upload.single('file'), new CreatePhotoProductController_1.CreatePhotoProductController().handle);
router.put('/updateAllDateProduct', ADMINisAuthenticated_1.ADMINisAuthenticated, new UpdateAllDateProductController_1.UpdateAllDateProductController().handle);
router["delete"]('/deletePhoto', ADMINisAuthenticated_1.ADMINisAuthenticated, new DeletePhotoProductController_1.DeletePhotoProductController().handle);
router["delete"]('/deleteAllPhotos', ADMINisAuthenticated_1.ADMINisAuthenticated, new DeleteAllPhotoProductController_1.DeleteAllPhotoProductController().handle);
router.put('/updatePhoto', ADMINisAuthenticated_1.ADMINisAuthenticated, upload.single('file'), new UpdatePhotoProductController_1.UpdatePhotoProductController().handle);
router.put('/updateOrderPhotoProduct', ADMINisAuthenticated_1.ADMINisAuthenticated, new UpdateOrderPhotoProductController_1.UpdateOrderPhotoProductController().handle);
router.get('/allPhotosProducts', ADMINisAuthenticated_1.ADMINisAuthenticated, new AllPhotosProductController_1.AllPhotosProductController().handle);
router.get('/photos', ADMINisAuthenticated_1.ADMINisAuthenticated, new AllPhotosController_1.AllPhotosController().handle);
router.get('/allProduct', ADMINisAuthenticated_1.ADMINisAuthenticated, new AllProductController_1.AllProductController().handle);
router.get('/allExistProducts', ADMINisAuthenticated_1.ADMINisAuthenticated, new AllProductExistController_1.AllProductExistController().handle);
router.get('/allProductsPage', ADMINisAuthenticated_1.ADMINisAuthenticated, new PageListAllProductController_1.PageListAllProductController().handle);
router.get('/findUniqueProduct', ADMINisAuthenticated_1.ADMINisAuthenticated, new ListExactProductController_1.ListExactProductController().handle);
router.get('/findFirstProduct', ADMINisAuthenticated_1.ADMINisAuthenticated, new FindFirstProductController_1.FindFirstProductController().handle);
router["delete"]('/deleteProduct', ADMINisAuthenticated_1.ADMINisAuthenticated, new DeleteProductController_1.DeleteProductController().handle);
router.put('/updateNameProduct', ADMINisAuthenticated_1.ADMINisAuthenticated, new UpdateNameProductController_1.UpdateNameProductController().handle);
router.get('/exportProduct', ADMINisAuthenticated_1.ADMINisAuthenticated, new ExportProductController_1.ExportProductController().handle);
router.put('/updateStatusProduct', ADMINisAuthenticated_1.ADMINisAuthenticated, new UpdateStatusProductController_1.UpdateStatusProductController().handle);
router.put('/emphasis', ADMINisAuthenticated_1.ADMINisAuthenticated, new UpdateProductEmphasisController_1.UpdateProductEmphasisController().handle);
router.put('/offer', ADMINisAuthenticated_1.ADMINisAuthenticated, new UpdateProductOfferController_1.UpdateProductOfferController().handle);
router.put('/updateStockProduct', ADMINisAuthenticated_1.ADMINisAuthenticated, new UpdateStockProductController_1.UpdateStockProductController().handle);
router.put('/updateFreeShipping', ADMINisAuthenticated_1.ADMINisAuthenticated, new UpdateProductFreeShippingController_1.UpdateProductFreeShippingController().handle);
router.post('/createDescriptionProduct', ADMINisAuthenticated_1.ADMINisAuthenticated, new CreateDescriptionProductController_1.CreateDescriptionProductController().handle);
router.put('/updateTitleDescription', ADMINisAuthenticated_1.ADMINisAuthenticated, new UpdateTitleDescriptionProductController_1.UpdateTitleDescriptionProductController().handle);
router.get('/findUniqueDescriptionProduct', ADMINisAuthenticated_1.ADMINisAuthenticated, new FindUniqueDescriptionProductController_1.FindUniqueDescriptionProductController().handle);
router.get('/descriptions', ADMINisAuthenticated_1.ADMINisAuthenticated, new AllDescriptionsController_1.AllDescriptionsController().handle);
router["delete"]('/deleteAllDescriptionsProduct', ADMINisAuthenticated_1.ADMINisAuthenticated, new DeleteAllDescriptionProductController_1.DeleteAllDescriptionProductController().handle);
router["delete"]('/deleteDescriptionProduct', ADMINisAuthenticated_1.ADMINisAuthenticated, new DeleteDescriptionProductController_1.DeleteDescriptionProductController().handle);
router.put('/updateOrderDescription', ADMINisAuthenticated_1.ADMINisAuthenticated, new UpdateOrderDescriptionProductController_1.UpdateOrderDescriptionProductController().handle);
router.put('/updateDescriptionProduct', ADMINisAuthenticated_1.ADMINisAuthenticated, new UpdateDescriptionProductController_1.UpdateDescriptionProductController().handle);
router.put('/updateStatusDescriptionProduct', ADMINisAuthenticated_1.ADMINisAuthenticated, new UpdateStatusDescriptionProductController_1.UpdateStatusDescriptionProductController().handle);
router.post('/createTagProduct', ADMINisAuthenticated_1.ADMINisAuthenticated, new CreateTagController_1.CreateTagController().handle);
router.put('/updateTagNameProduct', ADMINisAuthenticated_1.ADMINisAuthenticated, new UpdateTagController_1.UpdateTagController().handle);
router["delete"]('/deleteTagProduct', ADMINisAuthenticated_1.ADMINisAuthenticated, new DeleteTagController_1.DeleteTagController().handle);
router["delete"]('/deleteAllTagProduct', ADMINisAuthenticated_1.ADMINisAuthenticated, new DeleteAllTagController_1.DeleteAllTagController().handle);
router.get('/findUniqueTagProduct', ADMINisAuthenticated_1.ADMINisAuthenticated, new FindUniqueTagController_1.FindUniqueTagController().handle);
router.get('/allProductsDescriptionsStore', ADMINisAuthenticated_1.ADMINisAuthenticated, new AllDescriptionProductController_1.AllDescriptionProductController().handle);
router.get('/allTags', ADMINisAuthenticated_1.ADMINisAuthenticated, new AllTagController_1.AllTagController().handle);
router.get('/allProductsStore', new AllProductInStoreController_1.AllProductInStoreController().handle);
router.get('/allDescriptionProductsStore', new AllDescriptionProductInStoreController_1.AllDescriptionProductInStoreController().handle);
router.get('/allPhotosProductsStore', new AllPhotosProductInStoreController_1.AllPhotosProductInStoreController().handle);
router.get('/listProductsDestaque', new ListAllProductEmphasisController_1.ListAllProductEmphasisController().handle);
router.get('/listProductsOfertas', new ListAllProductOfferController_1.ListAllProductOfferController().handle);
router.get('/exactProductPage', new ListExactProductNameController_1.ListExactProductNameController().handle);
router.get('/allTagProducts', new AllTagProductController_1.AllTagProductController().handle);
router.get('/listPhotosPageProduct', new AllPhotosProductPageController_1.AllPhotosProductPageController().handle);
// -- ROUTES SEARCH --
router.get('/filter', new FilterController_1.FilterController().handle);
router.get('/filterPrice', new FilterPriceController_1.FilterPriceController().handle);
router.get('/searchProduct', new AllProductSearchController_1.AllProductSearchController().handle);
router.get('/orderProducts', new OrderProductsController_1.OrderProductsController().handle);
router.get('/favoritesProducts', new FavoritesProductsController_1.FavoritesProductsController().handle);
// ROUTES CATEGORIES AND PRODUCT --
router.post('/createProductCategory', ADMINisAuthenticated_1.ADMINisAuthenticated, new CreateProductCategoryController_1.CreateProductCategoryController().handle);
router.put('/updateCategoryNameProduct', ADMINisAuthenticated_1.ADMINisAuthenticated, new UpdateNameProductCategoryController_1.UpdateNameProductCategoryController().handle);
router.put('/updateStatusCategoryProduct', ADMINisAuthenticated_1.ADMINisAuthenticated, new UpdateStatusCategoryProductController_1.UpdateStatusCategoryProductController().handle);
router.get('/pageRelationsCategorys', ADMINisAuthenticated_1.ADMINisAuthenticated, new PageRelationsCategorysController_1.PageRelationsCategorysController().handle);
router.get('/findCategoryAndProduct', ADMINisAuthenticated_1.ADMINisAuthenticated, new FindCategoryAndProductController_1.FindCategoryAndProductController().handle);
router.put('/updateOrderRelation', ADMINisAuthenticated_1.ADMINisAuthenticated, new UpdateOrderProductCategoryController_1.UpdateOrderProductCategoryController().handle);
router["delete"]('/deleteCategoryProduct', ADMINisAuthenticated_1.ADMINisAuthenticated, new DeleteProductCategoryController_1.DeleteProductCategoryController().handle);
router["delete"]('/deleteAllCategoiesProduct', ADMINisAuthenticated_1.ADMINisAuthenticated, new DeleteAllProductCategoryController_1.DeleteAllProductCategoryController().handle);
router.get('/findUniqueRelationCategoryProduct', ADMINisAuthenticated_1.ADMINisAuthenticated, new FindUniqueRelationProductCategoryController_1.FindUniqueRelationProductCategoryController().handle);
router.get('/findAllRelationsProductAndCategory', ADMINisAuthenticated_1.ADMINisAuthenticated, new FindAllRelationProductAndCategoryController_1.FindAllRelationProductAndCategoryController().handle);
router.put('/mainCategoryProduct', ADMINisAuthenticated_1.ADMINisAuthenticated, new MainCategoryProductController_1.MainCategoryProductController().handle);
router.get('/productsPageCategories', new ProductsPageCategoriesController_1.ProductsPageCategoriesController().handle);
router.get('/getAllProductsCategory', new ProductsCategoriesController_1.ProductsCategoriesController().handle);
router.get('/findMainCategoryProduct', new FindMainCategoryProductController_1.FindMainCategoryProductController().handle);
router.get('/findDateSlugCategoryProduct', new FindFirstProductCategoryController_1.FindFirstProductCategoryController().handle);
// ROUTES TYPE ATTRIBUTE --
router.post('/createTypeAttribute', ADMINisAuthenticated_1.ADMINisAuthenticated, new CreateTypeAttributeController_1.CreateTypeAttributeController().handle);
router.put('/updateTypeAttribute', ADMINisAuthenticated_1.ADMINisAuthenticated, new UpdateTypeAttributeController_1.UpdateTypeAttributeController().handle);
router.get('/allTypeAttributes', new AllTypeAttributeController_1.AllTypeAttributeController().handle);
router.get('/findUniqueTypeAttribute', new FindUniqueTypeAttributeController_1.FindUniqueTypeAttributeController().handle);
// -- ROUTES VALUE ATTRIBUTE --
router.post('/createValueAttribute', ADMINisAuthenticated_1.ADMINisAuthenticated, new CreateValueAttributeController_1.CreateValueAttributeController().handle);
router.put('/updateValueAttribute', ADMINisAuthenticated_1.ADMINisAuthenticated, new UpdateValueAttributeController_1.UpdateValueAttributeController().handle);
router.put('/updateTypeValueAttribute', ADMINisAuthenticated_1.ADMINisAuthenticated, new UpdateTypeValueAttributeController_1.UpdateTypeValueAttributeController().handle);
router.put('/updateOrderValueAttribute', ADMINisAuthenticated_1.ADMINisAuthenticated, new UpdateValueOrderAttributeController_1.UpdateValueOrderAttributeController().handle);
router.get('/allValuesTypeAttribute', ADMINisAuthenticated_1.ADMINisAuthenticated, new AllValuesTypeAttributeController_1.AllValuesTypeAttributeController().handle);
router["delete"]('/deleteValueAttribute', ADMINisAuthenticated_1.ADMINisAuthenticated, new DeleteValueAttributeController_1.DeleteValueAttributeController().handle);
router.get('/findUniqueValueAttribute', ADMINisAuthenticated_1.ADMINisAuthenticated, new FindUniqueValueAttributeController_1.FindUniqueValueAttributeController().handle);
router["delete"]('/deleteAllImagesValueType', ADMINisAuthenticated_1.ADMINisAuthenticated, new DeleteImageAttributeRelationIDController_1.DeleteImageAttributeRelationIDController().handle);
router.get('/getAllValuesAttributes', ADMINisAuthenticated_1.ADMINisAuthenticated, new ValuesAttributeController_1.ValuesAttributeController().handle);
// ROUTES RELATION ATTRIBUTE AND PRODUCT --
router.post('/createRelationAttributeProduct', ADMINisAuthenticated_1.ADMINisAuthenticated, new CreateRelationAttributeProductController_1.CreateRelationAttributeProductController().handle);
router["delete"]('/deleteAllRelationProductAttributes', ADMINisAuthenticated_1.ADMINisAuthenticated, new DeleteProductRelationAllController_1.DeleteProductRelationAllController().handle);
router["delete"]('/deleteAttributeProduct', ADMINisAuthenticated_1.ADMINisAuthenticated, new DeleteRelationAttributeProductController_1.DeleteRelationAttributeProductController().handle);
router.get('/findUniqueRelationAttributeProduct', ADMINisAuthenticated_1.ADMINisAuthenticated, new FindUniqueRelationAttributeProductController_1.FindUniqueRelationAttributeProductController().handle);
router.get('/findFirstRelationAttributeProduct', ADMINisAuthenticated_1.ADMINisAuthenticated, new FirstFirstRelationAttributeProductController_1.FirstFirstRelationAttributeProductController().handle);
router.get('/pageAttributesRelationsProducts', ADMINisAuthenticated_1.ADMINisAuthenticated, new PageRelationAttributeProductController_1.PageRelationAttributeProductController().handle);
router.get('/findManyAttributeIDproduct', ADMINisAuthenticated_1.ADMINisAuthenticated, new AllProductAttributeController_1.AllProductAttributeController().handle);
router.put('/updateOrderRelationAttributeProduct', ADMINisAuthenticated_1.ADMINisAuthenticated, new UpdateOrderRelationAttributeProductController_1.UpdateOrderRelationAttributeProductController().handle);
router.put('/updateTypeRelationAttributeProduct', ADMINisAuthenticated_1.ADMINisAuthenticated, new UpdateTypeRelationAttributeProductController_1.UpdateTypeRelationAttributeProductController().handle);
router.put('/updateValueRelationAttributeProduct', ADMINisAuthenticated_1.ADMINisAuthenticated, new UpdateValueRelationAttributeProductController_1.UpdateValueRelationAttributeProductController().handle);
router.put('/updateStatusRelationAttributeProduct', ADMINisAuthenticated_1.ADMINisAuthenticated, new UpdateStatusRelationAttributeProductController_1.UpdateStatusRelationAttributeProductController().handle);
router.post('/createImageAttributeProduct', ADMINisAuthenticated_1.ADMINisAuthenticated, upload.single('file'), new CreateImageAttributeController_1.CreateImageAttributeController().handle);
router.put('/updateImageAttribute', ADMINisAuthenticated_1.ADMINisAuthenticated, upload.single('file'), new UpdateImageAttributeController_1.UpdateImageAttributeController().handle);
router["delete"]('/deleteImageAttributeProduct', ADMINisAuthenticated_1.ADMINisAuthenticated, new DeleteImageAttributeController_1.DeleteImageAttributeController().handle);
router.get('/findUniqueImageAttribute', ADMINisAuthenticated_1.ADMINisAuthenticated, new FindUniqueImageAttributeController_1.FindUniqueImageAttributeController().handle);
router.get('/getAllAttributesProduct', ADMINisAuthenticated_1.ADMINisAuthenticated, new ProductAttributeController_1.ProductAttributeController().handle);
router.get('/allProductsAndAttributes', new ProductsAndAttributeController_1.ProductsAndAttributeController().handle);
// -- ROUTES AVALIETION --
router.post('/createAvalietion', ADMINisAuthenticated_1.ADMINisAuthenticated && isAuthenticated_1.isAuthenticated, new CreateAvalietionController_1.CreateAvalietionController().handle);
router["delete"]('/deleteAvalietion', ADMINisAuthenticated_1.ADMINisAuthenticated, new DeleteAvalietionController_1.DeleteAvalietionController().handle);
router["delete"]('/deleteAvalietionProductID', ADMINisAuthenticated_1.ADMINisAuthenticated, new DeleteAvalietionProductIDController_1.DeleteAvalietionProductIDController().handle);
router.get('/pageAllAvalietion', ADMINisAuthenticated_1.ADMINisAuthenticated, new PageListAllAvalietionController_1.PageListAllAvalietionController().handle);
router.get('/pageAvalietion', ADMINisAuthenticated_1.ADMINisAuthenticated, new PageListAllAvalietionProductIDController_1.PageListAllAvalietionProductIDController().handle);
router.get('/avalietionData', ADMINisAuthenticated_1.ADMINisAuthenticated, new FindUniqueAvalietionController_1.FindUniqueAvalietionController().handle);
router.put('/updateStatusAvalietion', ADMINisAuthenticated_1.ADMINisAuthenticated, new UpdateStatusAvalietionController_1.UpdateStatusAvalietionController().handle);
router.get('/pageAvalietionStoreProduct', new PageAvalietionStoreProductIDController_1.PageAvalietionStoreProductIDController().handle);
// -- ROUTES VARIATION --
router.post('/createVariation', ADMINisAuthenticated_1.ADMINisAuthenticated, new CreateVariationController_1.CreateVariationController().handle);
router.get('/allVariationProduct', ADMINisAuthenticated_1.ADMINisAuthenticated, new AllVariationProductController_1.AllVariationProductController().handle);
router.get('/findVariationName', ADMINisAuthenticated_1.ADMINisAuthenticated, new FindFirstVariationNameController_1.FindFirstVariationNameController().handle);
router["delete"]('/deleteAllVariationProduct', ADMINisAuthenticated_1.ADMINisAuthenticated, new DeleteAllVariationProductController_1.DeleteAllVariationProductController().handle);
router["delete"]('/deleteVariation', ADMINisAuthenticated_1.ADMINisAuthenticated, new DeleteVariationController_1.DeleteVariationController().handle);
router.get('/findUniqueVariation', ADMINisAuthenticated_1.ADMINisAuthenticated, new FindUniqueVariationController_1.FindUniqueVariationController().handle);
router.put('/updateStatusVariation', ADMINisAuthenticated_1.ADMINisAuthenticated, new UpdateStatusVariationController_1.UpdateStatusVariationController().handle);
router.get('/pageAllVariation', ADMINisAuthenticated_1.ADMINisAuthenticated, new PageListAllVariationController_1.PageListAllVariationController().handle);
router.put('/updateNameVariation', ADMINisAuthenticated_1.ADMINisAuthenticated, new UpdateNameVariationController_1.UpdateNameVariationController().handle);
router.put('/updateOrderVariacao', ADMINisAuthenticated_1.ADMINisAuthenticated, new UpdateOrderVariacaoController_1.UpdateOrderVariacaoController().handle);
router.post('/createImageVariation', ADMINisAuthenticated_1.ADMINisAuthenticated, upload.single('file'), new CreateImageVariationController_1.CreateImageVariationController().handle);
router.get('/allVariationImages', ADMINisAuthenticated_1.ADMINisAuthenticated, new AllVariationImageController_1.AllVariationImageController().handle);
router.get('/allImagesVariation', ADMINisAuthenticated_1.ADMINisAuthenticated, new AllImagesVariationController_1.AllImagesVariationController().handle);
router["delete"]('/deleteAllPhotosVariation', ADMINisAuthenticated_1.ADMINisAuthenticated, new DeleteALLImageVariationProductController_1.DeleteALLImageVariationProductController().handle);
router["delete"]('/deleteImageVariantion', ADMINisAuthenticated_1.ADMINisAuthenticated, new DeleteImageVariationController_1.DeleteImageVariationController().handle);
router.put('/updateOrderImageVariation', ADMINisAuthenticated_1.ADMINisAuthenticated, new UpdateOrderImageVariationController_1.UpdateOrderImageVariationController().handle);
router.get('/findUniqueImageVariation', ADMINisAuthenticated_1.ADMINisAuthenticated, new FindUniqueImageVariationController_1.FindUniqueImageVariationController().handle);
router.post('/createProductVariation', ADMINisAuthenticated_1.ADMINisAuthenticated, new CreateProductVariationController_1.CreateProductVariationController().handle);
router["delete"]('/deleteAllProductVariation', ADMINisAuthenticated_1.ADMINisAuthenticated, new DeleteProductVariationController_1.DeleteProductVariationController().handle);
router["delete"]('/deleteProductVariation', ADMINisAuthenticated_1.ADMINisAuthenticated, new VariationDeleteController_1.VariationDeleteController().handle);
router.get('/findFirstProductVariation', ADMINisAuthenticated_1.ADMINisAuthenticated, new FindFirstProductVariationController_1.FindFirstProductVariationController().handle);
router.get('/findUniqueProductVariation', ADMINisAuthenticated_1.ADMINisAuthenticated, new FindUniqueProductVariationController_1.FindUniqueProductVariationController().handle);
router.put('/updateStatusProductVariation', ADMINisAuthenticated_1.ADMINisAuthenticated, new UpdateStatusProductVariationController_1.UpdateStatusProductVariationController().handle);
router.put('/updateProductVariationName', ADMINisAuthenticated_1.ADMINisAuthenticated, new UpdateNameProductVariationController_1.UpdateNameProductVariationController().handle);
router.put('/updateOrderProductVariationName', ADMINisAuthenticated_1.ADMINisAuthenticated, new UpdateOrderProductVariationController_1.UpdateOrderProductVariationController().handle);
// -- ROUTES BUY TOGETHER --
router.post('/createBuyTogether', ADMINisAuthenticated_1.ADMINisAuthenticated, new CreateBuyTogetherController_1.CreateBuyTogetherController().handle);
router.put('/updateProductBuyTogether', ADMINisAuthenticated_1.ADMINisAuthenticated, new UpdateProductBuyTogetherController_1.UpdateProductBuyTogetherController().handle);
router.put('/updateNameGroupBuyTogether', ADMINisAuthenticated_1.ADMINisAuthenticated, new UpdateNameGroupBuyTogetherController_1.UpdateNameGroupBuyTogetherController().handle);
router.put('/updateOrderBuyTogether', ADMINisAuthenticated_1.ADMINisAuthenticated, new UpdateOrderBuyTogetherController_1.UpdateOrderBuyTogetherController().handle);
router.put('/updateStatusBuyTogether', ADMINisAuthenticated_1.ADMINisAuthenticated, new UpdateStatusBuyTogetherController_1.UpdateStatusBuyTogetherController().handle);
router["delete"]('/deleteGroupAllProductsBuyTogether', ADMINisAuthenticated_1.ADMINisAuthenticated, new DeleteGroupBuyTogetherController_1.DeleteGroupBuyTogetherController().handle);
router["delete"]('/deleteGroupBuyTogether', ADMINisAuthenticated_1.ADMINisAuthenticated, new DeleteBuyTogetherController_1.DeleteBuyTogetherController().handle);
router["delete"]('/deleteParentIdBuyTogether', ADMINisAuthenticated_1.ADMINisAuthenticated, new DeleteBuyTogetherAllProductController_1.DeleteBuyTogetherAllProductController().handle);
router.get('/findUniqueBuyTogether', ADMINisAuthenticated_1.ADMINisAuthenticated, new FindUniqueBuyTogetherController_1.FindUniqueBuyTogetherController().handle);
router.get('/allBuyTogether', ADMINisAuthenticated_1.ADMINisAuthenticated, new AllBuyTogetherController_1.AllBuyTogetherController().handle);
router.get('/findFirstGroupBuyTogether', ADMINisAuthenticated_1.ADMINisAuthenticated, new FindFirstBuyTogetherController_1.FindFirstBuyTogetherController().handle);
router.get('/findProductGroupBuyTogether', ADMINisAuthenticated_1.ADMINisAuthenticated, new ProductIDBuyTogetherController_1.ProductIDBuyTogetherController().handle);
router.get('/findItensGroupBuyTogether', ADMINisAuthenticated_1.ADMINisAuthenticated, new FindGroupBuyTogetherIDController_1.FindGroupBuyTogetherIDController().handle);
router.get('/buyTogetherProductStore', new FindBuyTogetherIDController_1.FindBuyTogetherIDController().handle);
// -- ROUTES COUNTERPROPOSAL --
router.get('/pagePropousalList', ADMINisAuthenticated_1.ADMINisAuthenticated, new PageCounterProposalController_1.PageCounterProposalController().handle);
router.get('/findUniqueCounterProposal', ADMINisAuthenticated_1.ADMINisAuthenticated, new FindUniqueCounterProposalController_1.FindUniqueCounterProposalController().handle);
router.put('/updateDataCounterProposal', ADMINisAuthenticated_1.ADMINisAuthenticated, new CounterProposalController_1.CounterProposalController().handle);
router.post('/createCounterProposal', new CreateCounterProposalController_1.CreateCounterProposalController().handle);
// -- ROUTES STOCK PRODUCT CUSTOMER --
router.post('/createStockProductZero', new CreateStockProductCustomerController_1.CreateStockProductCustomerController().handle);
router.get('/getStockProduct', new StockProductCustomerController_1.StockProductCustomerController().handle);
// -- ROUTES MENU CATEGORY --
router.post('/createMenuCategory', ADMINisAuthenticated_1.ADMINisAuthenticated, new CreateMenuCategoryController_1.CreateMenuCategoryController().handle);
router.get('/pageMenu', ADMINisAuthenticated_1.ADMINisAuthenticated, new PageListAllMenuCategoryController_1.PageListAllMenuCategoryController().handle);
router.get('/findFirstMenu', ADMINisAuthenticated_1.ADMINisAuthenticated, new FindFirstMenuController_1.FindFirstMenuController().handle);
router.get('/findMenuID', ADMINisAuthenticated_1.ADMINisAuthenticated, new FindMenuIDController_1.FindMenuIDController().handle);
router.get('/findUniqueMenu', ADMINisAuthenticated_1.ADMINisAuthenticated, new FindUniqueMenuIDController_1.FindUniqueMenuIDController().handle);
router.put('/updateOrderCategoryMenu', ADMINisAuthenticated_1.ADMINisAuthenticated, new UpdateOrderCategoryMenuController_1.UpdateOrderCategoryMenuController().handle);
router.put('/updateStatusMenu', ADMINisAuthenticated_1.ADMINisAuthenticated, new StatusCategoryMenuCategoriesController_1.StatusCategoryMenuCategoriesController().handle);
router.put('/updateNameMenu', ADMINisAuthenticated_1.ADMINisAuthenticated, new UpdateNameMenuController_1.UpdateNameMenuController().handle);
router.put('/updatePositionMenu', ADMINisAuthenticated_1.ADMINisAuthenticated, new UpdatePositionMenuController_1.UpdatePositionMenuController().handle);
router.put('/updateNameCategory', ADMINisAuthenticated_1.ADMINisAuthenticated, new UpdateNameCategoryMenuController_1.UpdateNameCategoryMenuController().handle);
router.put('/updateItemNameCategory', ADMINisAuthenticated_1.ADMINisAuthenticated, new UpdateItemNameCategoryController_1.UpdateItemNameCategoryController().handle);
router["delete"]('/deleteCategoryMenu', ADMINisAuthenticated_1.ADMINisAuthenticated, new DeleteMenuCategoryMenuIDController_1.DeleteMenuCategoryMenuIDController().handle);
router["delete"]('/deleteMenu', ADMINisAuthenticated_1.ADMINisAuthenticated, new DeleteMenuIDController_1.DeleteMenuIDController().handle);
router["delete"]('/deleteImageMenuCategory', ADMINisAuthenticated_1.ADMINisAuthenticated, new DeletetImageMenuCategoryController_1.DeletetImageMenuCategoryController().handle);
router.post('/createImageMenuCategory', ADMINisAuthenticated_1.ADMINisAuthenticated, upload.single('file'), new CreateImageMenuCategoryController_1.CreateImageMenuCategoryController().handle);
router.put('/updateImageMenuCategory', ADMINisAuthenticated_1.ADMINisAuthenticated, upload.single('file'), new UpdateImageMenuCategoryController_1.UpdateImageMenuCategoryController().handle);
router.put('/updateSlugMenu', ADMINisAuthenticated_1.ADMINisAuthenticated, new UpdateSlugMenuController_1.UpdateSlugMenuController().handle);
router.get('/positionListMenu', new ListPositionMenuCategoryController_1.ListPositionMenuCategoryController().handle);
router.get('/listCategoryMenu', new ListCategoryMenuController_1.ListCategoryMenuController().handle);
router.get('/listMenuCategories', new AllCategoriesMenuController_1.AllCategoriesMenuController().handle);
router.get('/categoriesParentIdBradCrumb', new MenuCategoryController_1.MenuCategoryController().handle);
// -- ROUTES GROUP FILTERS --
router.post('/createGroupFilter', ADMINisAuthenticated_1.ADMINisAuthenticated, new CreateGroupFilterController_1.CreateGroupFilterController().handle);
router.put('/updateNameGroupFilter', ADMINisAuthenticated_1.ADMINisAuthenticated, new UpdateNameGroupFilterController_1.UpdateNameGroupFilterController().handle);
router.put('/updateTypeAttributeGroup', ADMINisAuthenticated_1.ADMINisAuthenticated, new UpdateTypeAttributeGroupController_1.UpdateTypeAttributeGroupController().handle);
router.put('/updateSlugGroupFilter', ADMINisAuthenticated_1.ADMINisAuthenticated, new UpdateSlugGroupFilterController_1.UpdateSlugGroupFilterController().handle);
router.put('/updateStatusGroupFilter', ADMINisAuthenticated_1.ADMINisAuthenticated, new UpdateStatusGroupFilterController_1.UpdateStatusGroupFilterController().handle);
router.get('/pagesGroupFilter', ADMINisAuthenticated_1.ADMINisAuthenticated, new PageGroupsFiltersController_1.PageGroupsFiltersController().handle);
router.get('/filterFirstGroupFiltro', ADMINisAuthenticated_1.ADMINisAuthenticated, new FindFirstGroupsController_1.FindFirstGroupsController().handle);
router["delete"]('/deleteGroupFilter', ADMINisAuthenticated_1.ADMINisAuthenticated, new DeleteGroupFilterController_1.DeleteGroupFilterController().handle);
router.get('/findsNameGroupFilter', new FindsNameGroupFilterController_1.FindsNameGroupFilterController().handle);
router.get('/findTypeAttributeGroupFilter', new FindTypeFilterController_1.FindTypeFilterController().handle);
router.get('/findUniqueIDGroup', ADMINisAuthenticated_1.ADMINisAuthenticated, new FindIDGroupFilterController_1.FindIDGroupFilterController().handle);
router.get('/listFilterGroup', new FindSlugGroupFilterController_1.FindSlugGroupFilterController().handle);
// -- ROUTES FILTER ATTRIBUTES --
router.post('/createFilterAttribute', ADMINisAuthenticated_1.ADMINisAuthenticated, new CreateFilterAttributeController_1.CreateFilterAttributeController().handle);
router["delete"]('/deleteAllFilterAttributeGroup', ADMINisAuthenticated_1.ADMINisAuthenticated, new DeleteAllFilterAttributeController_1.DeleteAllFilterAttributeController().handle);
router["delete"]('/deleteFilterAttribute', ADMINisAuthenticated_1.ADMINisAuthenticated, new DeleteFilterAttributeController_1.DeleteFilterAttributeController().handle);
router.get('/pagesFilterAttributes', ADMINisAuthenticated_1.ADMINisAuthenticated, new PageFilterAttributeController_1.PageFilterAttributeController().handle);
router.put('/updateNameFilterAttribute', ADMINisAuthenticated_1.ADMINisAuthenticated, new UpdateNameFilterAttributeController_1.UpdateNameFilterAttributeController().handle);
router.put('/updateValueFilterAttribute', ADMINisAuthenticated_1.ADMINisAuthenticated, new UpdateValueFilterAttributeController_1.UpdateValueFilterAttributeController().handle);
router.put('/updateOrderFilterAttribute', ADMINisAuthenticated_1.ADMINisAuthenticated, new UpdateOrderFilterAttributeController_1.UpdateOrderFilterAttributeController().handle);
router.put('/updateStatusFilterAttribute', ADMINisAuthenticated_1.ADMINisAuthenticated, new UpdateStatusFilterAttributeController_1.UpdateStatusFilterAttributeController().handle);
router.post('/createImageFilterAttribute', ADMINisAuthenticated_1.ADMINisAuthenticated, upload.single('file'), new CreateImageFilterAttributeController_1.CreateImageFilterAttributeController().handle);
router.put('/updateImageFilterAttribute', ADMINisAuthenticated_1.ADMINisAuthenticated, upload.single('file'), new UpdateImageFilterAttributeController_1.UpdateImageFilterAttributeController().handle);
router["delete"]('/deleteImageFilterAttribute', ADMINisAuthenticated_1.ADMINisAuthenticated, new DeleteImageFilterAttributeController_1.DeleteImageFilterAttributeController().handle);
router.get('/findUniqueFilterAttribute', ADMINisAuthenticated_1.ADMINisAuthenticated, new FindUniqueFilterAttributeController_1.FindUniqueFilterAttributeController().handle);
router.get('/findManyNameFilterAttribute', ADMINisAuthenticated_1.ADMINisAuthenticated, new FindManyFilterAttributeNameController_1.FindManyFilterAttributeNameController().handle);
router.get('/allAttributesGroups', new FindFilterAttributeController_1.FindFilterAttributeController().handle);
// -- ROUTES FILTER CATEGORY --
router.post('/createFilterCategory', ADMINisAuthenticated_1.ADMINisAuthenticated, new CreateFilterCategoryController_1.CreateFilterCategoryController().handle);
router["delete"]('/deleteFilterCategory', ADMINisAuthenticated_1.ADMINisAuthenticated, new DeleteFilterCategoryController_1.DeleteFilterCategoryController().handle);
router.get('/pagesFiltrosCategory', ADMINisAuthenticated_1.ADMINisAuthenticated, new PageFilterCategoryController_1.PageFilterCategoryController().handle);
router.get('/findManyFilterName', ADMINisAuthenticated_1.ADMINisAuthenticated, new FindManyFilterCategoryNameController_1.FindManyFilterCategoryNameController().handle);
router.get('/findUniqueFilterCategory', ADMINisAuthenticated_1.ADMINisAuthenticated, new FindUniqueFilterCategoryController_1.FindUniqueFilterCategoryController().handle);
router.put('/updateFilterNameGroupCategory', ADMINisAuthenticated_1.ADMINisAuthenticated, new UpdateNameFilterGroupController_1.UpdateNameFilterGroupController().handle);
router.put('/updateCategoryNameFilter', ADMINisAuthenticated_1.ADMINisAuthenticated, new UpdateCategoryNameFilterCategoryController_1.UpdateCategoryNameFilterCategoryController().handle);
router.put('/updateFilterStatusCategory', ADMINisAuthenticated_1.ADMINisAuthenticated, new UpdateStatusFilterCategoryController_1.UpdateStatusFilterCategoryController().handle);
router.put('/updateFilterOrderCategory', ADMINisAuthenticated_1.ADMINisAuthenticated, new UpdateCategoryOrderFilterController_1.UpdateCategoryOrderFilterController().handle);
router.post('/createImageFilterCategory', ADMINisAuthenticated_1.ADMINisAuthenticated, upload.single('file'), new CreateImageFilterCategoryController_1.CreateImageFilterCategoryController().handle);
router.put('/updateImageFilterCategory', ADMINisAuthenticated_1.ADMINisAuthenticated, upload.single('file'), new UpdateImageFilterCategoryController_1.UpdateImageFilterCategoryController().handle);
router["delete"]('/deleteImageFilterCategory', ADMINisAuthenticated_1.ADMINisAuthenticated, new DeleteImageFilterCategoryController_1.DeleteImageFilterCategoryController().handle);
// -- ROUTES BANNER --
router.post('/createBanner', ADMINisAuthenticated_1.ADMINisAuthenticated, upload.single('file'), new CreateBannerController_1.CreateBannerController().handle);
router.put('/updateAllDateBanner', ADMINisAuthenticated_1.ADMINisAuthenticated, new UpdateAllDateBannerController_1.UpdateAllDateBannerController().handle);
router.get('/pageListBanner', ADMINisAuthenticated_1.ADMINisAuthenticated, new PageListAllBannerController_1.PageListAllBannerController().handle);
router["delete"]('/deleteBanner', ADMINisAuthenticated_1.ADMINisAuthenticated, new DeleteBannerController_1.DeleteBannerController().handle);
router.put('/updateBanner', ADMINisAuthenticated_1.ADMINisAuthenticated, upload.single('file'), new UpdateBannerController_1.UpdateBannerController().handle);
router.put('/updatePosicaoBanner', ADMINisAuthenticated_1.ADMINisAuthenticated, new UpdatePosicaoBannerController_1.UpdatePosicaoBannerController().handle);
router.put('/updateStatusBanner', ADMINisAuthenticated_1.ADMINisAuthenticated, new StatusBannerController_1.StatusBannerController().handle);
router.get('/exactBanner', ADMINisAuthenticated_1.ADMINisAuthenticated, new ListExactBannerController_1.ListExactBannerController().handle);
router.get('/updatePublishBanner', ADMINisAuthenticated_1.ADMINisAuthenticated, new PublishProgramadBannerController_1.PublishProgramadBannerController().handle);
router.get('/activeBanner', new ActiveAllBannerController_1.ActiveAllBannerController().handle);
// -- ROUTES NEWSLETTERS --
router.post('/createNewsletter', new CreateNewslettersController_1.CreateNewslettersController().handle);
router["delete"]('/deleteNewsletter', ADMINisAuthenticated_1.ADMINisAuthenticated, new DeleteNewslettersController_1.DeleteNewslettersController().handle);
router.get('/listNewsletter', ADMINisAuthenticated_1.ADMINisAuthenticated, new ListNewslettersController_1.ListNewslettersController().handle);
router.get('/listExactNewsletter', ADMINisAuthenticated_1.ADMINisAuthenticated, new ListExactNewslettersController_1.ListExactNewslettersController().handle);
router.get('/pageNewsletter', ADMINisAuthenticated_1.ADMINisAuthenticated, new PageListAllNewslettersController_1.PageListAllNewslettersController().handle);
router.get('/exportNews', ADMINisAuthenticated_1.ADMINisAuthenticated, new ExportNewslettersController_1.ExportNewslettersController().handle);
// -- ROUTES CONTACT --
router.post('/createContact', new CreateContactController_1.CreateContactController().handle);
router["delete"]('/deleteContact', ADMINisAuthenticated_1.ADMINisAuthenticated, new DeleteContactController_1.DeleteContactController().handle);
router.get('/listContact', ADMINisAuthenticated_1.ADMINisAuthenticated, new ListContactController_1.ListContactController().handle);
router.get('/findUniqueContact', ADMINisAuthenticated_1.ADMINisAuthenticated, new FindUniqueContactController_1.FindUniqueContactController().handle);
router.get('/pageContact', ADMINisAuthenticated_1.ADMINisAuthenticated, new PageListAllContactController_1.PageListAllContactController().handle);
router.get('/exportContacts', ADMINisAuthenticated_1.ADMINisAuthenticated, new ExportContactController_1.ExportContactController().handle);
// -- ROUTES SEND EMAILS --
router.get('/admin/sendlistuser', ADMINisAuthenticated_1.ADMINisAuthenticated, new EmailExportAdminUserController_1.EmailExportAdminUserController().handle);
router.get('/sendListCustomer', ADMINisAuthenticated_1.ADMINisAuthenticated, new EmailExportCustomerUserController_1.EmailExportCustomerUserController().handle);
router.get('/sendlistproduct', ADMINisAuthenticated_1.ADMINisAuthenticated, new EmailExportProductsController_1.EmailExportProductsController().handle);
router.get('/sendEmailNewsletters', ADMINisAuthenticated_1.ADMINisAuthenticated, new EmailExportNewslettersController_1.EmailExportNewslettersController().handle);
router.get('/sendEmailContact', ADMINisAuthenticated_1.ADMINisAuthenticated, new EmailExportContactController_1.EmailExportContactController().handle);
