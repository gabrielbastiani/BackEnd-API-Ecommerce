// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// criar uma migration: yarn prisma migrate dev

model Admin {
  id       String  @id @default(uuid())
  name     String  @db.VarChar(295)
  slug     String? @db.VarChar(295)
  email    String  @unique @db.VarChar(180)
  password String

  authenticated Boolean   @default(false)
  role          RoleAdmin @default(ADMIN)

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  store    Store?  @relation(fields: [store_id], references: [id])
  store_id String?

  @@map("admins")
}

enum RoleAdmin {
  EMPLOYEE
  ADMIN
}

model PasswordRecoveryAdmin {
  id    String @id @default(uuid())
  email String

  @@map("passwordrecoveryadmins")
}

model Customer {
  id                String  @id @default(uuid())
  name              String  @db.VarChar(295)
  slug              String? @db.VarChar(295)
  email             String  @unique @db.VarChar(180)
  password          String
  cpf               String? @unique @db.VarChar(125)
  cnpj              String? @unique @db.VarChar(125)
  stateRegistration String? @db.VarChar(155)
  phone             String? @db.VarChar(135)
  dateOfBirth       String? @db.VarChar(125)
  gender            String? @db.VarChar(135)
  newslatter        String? @db.VarChar(7)
  address           String? @db.VarChar(405)
  number            String? @db.VarChar(125)
  complement        String? @db.VarChar(155)
  neighborhood      String? @db.VarChar(185)
  cep               String? @db.VarChar(125)
  city              String? @db.VarChar(185)
  state             String? @db.VarChar(185)
  authenticated     Boolean @default(true)

  deliveryaddresscustomers DeliveryAddressCustomer[]
  avalietions              Avalietion[]

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  store    Store?  @relation(fields: [store_id], references: [id])
  store_id String?

  @@map("customers")
}

model DeliveryAddressCustomer {
  id           String    @id @default(uuid())
  customer     Customer? @relation(fields: [customer_id], references: [id])
  customer_id  String?
  address      String?   @db.VarChar(405)
  number       String?   @db.VarChar(125)
  complement   String?   @db.VarChar(155)
  reference    String?   @db.VarChar(405)
  neighborhood String?   @db.VarChar(185)
  cep          String?   @db.VarChar(125)
  city         String?   @db.VarChar(185)
  state        String?   @db.VarChar(185)
  phone        String?   @db.VarChar(135)

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  store    Store?  @relation(fields: [store_id], references: [id])
  store_id String?

  @@map("deliveryaddresscustomers")
}

model PasswordRecoveryCustomer {
  id    String @id @default(uuid())
  email String

  @@map("passwordrecoverycustomers")
}

model Store {
  id           String  @id @default(uuid())
  logo         String?
  name         String? @db.VarChar(185)
  cnpj         String? @db.VarChar(85)
  email        String? @db.VarChar(95)
  phone        String? @db.VarChar(85)
  cellPhone    String? @db.VarChar(85)
  address      String? @db.VarChar(405)
  number       String? @db.VarChar(8)
  neighborhood String? @db.VarChar(95)
  complement   String? @db.VarChar(155)
  cep          String? @db.VarChar(25)
  city         String? @db.VarChar(185)
  state        String? @db.VarChar(155)

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  admins                    Admin[]
  customers                 Customer[]
  deliveryaddresscustomers  DeliveryAddressCustomer[]
  socialmedias              SocialMedia[]
  institutionaltexts        InstitutionalText[]
  categories                Category[]
  products                  Product[]
  imagestores               ImageStore[]
  tags                      Tag[]
  typeattributes            TypeAttribute[]
  relationattributeproducts RelationAttributeProduct[]
  variations                Variation[]
  menucategories            MenuCategory[]
  avalietions               Avalietion[]
  newsletters               Newsletter[]
  contacts                  Contact[]
  productcategories         ProductCategory[]
  groupfilters              GroupFilter[]
  filterattributes          FilterAttribute[]
  filtercategories          FilterCategory[]
  buytogethers              BuyTogether[]

  @@map("stores")
}

model SocialMedia {
  id           String            @id @default(uuid())
  store        Store?            @relation(fields: [store_id], references: [id])
  store_id     String?
  name         String?           @db.VarChar(325)
  link         String?           @db.VarChar(2725)
  image        String?
  order        Int?
  position     String?           @db.VarChar(300)
  slugPosition String?           @db.VarChar(295)
  status       StatusSocialMedia @default(Disponivel)

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  @@map("socialmedias")
}

enum StatusSocialMedia {
  Disponivel
  Indisponivel
}

model InstitutionalText {
  id           String                  @id @default(uuid())
  store        Store?                  @relation(fields: [store_id], references: [id])
  store_id     String?
  title        String                  @db.VarChar(325)
  slug         String?                 @unique @db.VarChar(325)
  order        Int?
  position     String?                 @db.VarChar(300)
  slugPosition String?                 @db.VarChar(325)
  description  String?                 @db.VarChar(95725)
  status       StatusInstitutionalText @default(Disponivel)

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  @@map("institutionaltexts")
}

enum StatusInstitutionalText {
  Disponivel
  Indisponivel
}

model ImageStore {
  id           String           @id @default(uuid())
  store        Store?           @relation(fields: [store_id], references: [id])
  store_id     String?
  titleImage   String?          @db.VarChar(425)
  image        String?
  order        Int?
  position     String?          @db.VarChar(300)
  slugPosition String?          @db.VarChar(325)
  status       StatusImageStore @default(Disponivel)

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  @@map("imagesstore")
}

enum StatusImageStore {
  Disponivel
  Indisponivel
}

model Category {
  id          String         @id @default(uuid())
  name        String?        @unique @db.VarChar(300)
  slug        String?        @db.VarChar(300)
  description String?        @db.VarChar(15725)
  nivel       Int?
  relationId  String?
  order       Int?
  status      StatusCategory @default(Disponivel)

  imagecategories   ImageCategory[]
  productcategories ProductCategory[]
  menucategories    MenuCategory[]
  filtercategories  FilterCategory[]

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  store    Store?  @relation(fields: [store_id], references: [id])
  store_id String?

  @@map("categories")
}

enum StatusCategory {
  Disponivel
  Indisponivel
}

model ImageCategory {
  id          String   @id @default(uuid())
  category    Category @relation(fields: [category_id], references: [id])
  category_id String
  image       String

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  @@map("imagecategories")
}

model Product {
  id             String             @id @default(uuid())
  name           String             @db.VarChar(325)
  slug           String?            @db.VarChar(325)
  price          Int?
  promotion      Int?
  sku            String?            @db.VarChar(25)
  stock          Int?
  weight         String?            @db.VarChar(15)
  width          String?            @db.VarChar(15)
  height         String?            @db.VarChar(15)
  depth          String?            @db.VarChar(15)
  amount         Int?
  reservedAmount Int?
  urlVideo       String?
  freeShipping   StatusFreeShipping @default(Sim)
  status         StatusProduct      @default(Disponivel)
  emphasis       StatusEmphasis     @default(Nao)
  offer          StatusOffer        @default(Nao)
  buyTogether    BuyTogether?       @relation(fields: [buyTogether_id], references: [id])
  buyTogether_id String?

  photoproducts             PhotoProduct[]
  descriptionproducts       DescriptionProduct[]
  tags                      Tag[]
  relationattributeproducts RelationAttributeProduct[]
  variations                Variation[]
  avalietions               Avalietion[]
  productcategories         ProductCategory[]
  buytogethers              BuyTogether[]              @relation("buy")

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  store    Store?  @relation(fields: [store_id], references: [id])
  store_id String?

  @@map("products")
}

enum StatusFreeShipping {
  Sim
  Nao
}

enum StatusProduct {
  Disponivel
  Indisponivel
}

enum StatusEmphasis {
  Sim
  Nao
}

enum StatusOffer {
  Sim
  Nao
}

model PhotoProduct {
  id         String  @id @default(uuid())
  product    Product @relation(fields: [product_id], references: [id])
  product_id String
  image      String
  order      Int?

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  @@map("photoproducts")
}

model DescriptionProduct {
  id          String                   @id @default(uuid())
  product     Product                  @relation(fields: [product_id], references: [id])
  product_id  String
  title       String?                  @db.VarChar(500)
  description String?
  status      StatusDescriptionProduct @default(Disponivel)

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  @@map("descriptionproducts")
}

enum StatusDescriptionProduct {
  Disponivel
  Indisponivel
}

model ProductCategory {
  id         String   @id @default(uuid())
  product    Product  @relation(fields: [product_id], references: [id])
  product_id String
  category   Category @relation(fields: [name], references: [name])
  name       String

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  store    Store?  @relation(fields: [store_id], references: [id])
  store_id String?

  @@map("productcategories")
}

model Tag {
  id         String  @id @default(uuid())
  product    Product @relation(fields: [product_id], references: [id])
  product_id String
  tagName    String  @db.VarChar(100)

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  store    Store?  @relation(fields: [store_id], references: [id])
  store_id String?

  @@map("tags")
}

model TypeAttribute {
  id   String  @id @default(uuid())
  type String? @unique @db.VarChar(300)
  slug String? @db.VarChar(300)

  relationattributeproducts RelationAttributeProduct[]
  groupfilters              GroupFilter[]

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  store    Store?  @relation(fields: [store_id], references: [id])
  store_id String?

  @@map("typeattributes")
}

model RelationAttributeProduct {
  id            String                         @id @default(uuid())
  product       Product?                       @relation(fields: [product_id], references: [id])
  product_id    String?
  typeAttribute TypeAttribute?                 @relation(fields: [type], references: [type])
  type          String?
  value         String?
  nivel         Int?
  relationId    String?
  order         Int?
  status        StatusRelationAttributeProduct @default(Disponivel)

  imageattributes ImageAttribute[]

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  store    Store?  @relation(fields: [store_id], references: [id])
  store_id String?

  @@map("relationattributeproducts")
}

enum StatusRelationAttributeProduct {
  Disponivel
  Indisponivel
}

model ImageAttribute {
  id                          String                   @id @default(uuid())
  relationAttributeProduct    RelationAttributeProduct @relation(fields: [relationAttributeProduct_id], references: [id])
  relationAttributeProduct_id String
  image                       String

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  @@map("imageattributes")
}

model Avalietion {
  id          String   @id @default(uuid())
  customer    Customer @relation(fields: [customer_id], references: [id])
  customer_id String
  product     Product  @relation(fields: [product_id], references: [id])
  product_id  String
  description String?  @db.VarChar(1225)
  point       String?  @db.VarChar(175)
  status      String?

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  store    Store?  @relation(fields: [store_id], references: [id])
  store_id String?

  @@map("avalietions")
}

model Variation {
  id         String          @id @default(uuid())
  product    Product         @relation(fields: [product_id], references: [id])
  product_id String
  name       String          @db.VarChar(325)
  slug       String?         @db.VarChar(325)
  status     StatusVariation @default(Disponivel)

  photovariations PhotoVariation[]

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  store    Store?  @relation(fields: [store_id], references: [id])
  store_id String?

  @@map("variations")
}

enum StatusVariation {
  Disponivel
  Indisponivel
}

model PhotoVariation {
  id           String    @id @default(uuid())
  variation    Variation @relation(fields: [variation_id], references: [id])
  variation_id String
  image        String
  order        Int?

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  @@map("photovariations")
}

model BuyTogether {
  id         String            @id @default(uuid())
  nameGroup  String?           @db.VarChar(385)
  product    Product?          @relation(name: "buy", fields: [product_id], references: [id])
  product_id String?
  nivel      Int?
  relationId String?
  order      Int?
  status     StatusBuyTogether @default(Disponivel)

  products Product[]

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  store    Store?  @relation(fields: [store_id], references: [id])
  store_id String?

  @@map("buytogethers")
}

enum StatusBuyTogether {
  Disponivel
  Indisponivel
}

model MenuCategory {
  id           String      @id @default(uuid())
  nameGroup    String?     @db.VarChar(385)
  category     Category?   @relation(fields: [name], references: [name])
  name         String?
  categoryName String?     @db.VarChar(385)
  slugCategory String?     @db.VarChar(400)
  position     String?     @db.VarChar(300)
  slugPosition String?     @db.VarChar(325)
  order        Int?
  nivel        Int?
  relationId   String?
  status       StatusGroup @default(Disponivel)

  imagemenucategories ImageMenuCategory[]

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  store    Store?  @relation(fields: [store_id], references: [id])
  store_id String?

  @@map("menucategories")
}

enum StatusGroup {
  Disponivel
  Indisponivel
}

model ImageMenuCategory {
  id              String       @id @default(uuid())
  menuCategory    MenuCategory @relation(fields: [menuCategory_id], references: [id])
  menuCategory_id String
  image           String

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  @@map("imagemenucategories")
}

model GroupFilter {
  id            String            @id @default(uuid())
  nameGroup     String?           @db.VarChar(385)
  typeAttribute TypeAttribute?    @relation(fields: [type], references: [type])
  type          String?
  slugCategory  String?           @db.VarChar(400)
  order         Int?
  status        StatusGroupFilter @default(Disponivel)

  filtercategories FilterCategory[]
  filterattributes FilterAttribute[]

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  store    Store?  @relation(fields: [store_id], references: [id])
  store_id String?

  @@map("groupfilters")
}

enum StatusGroupFilter {
  Disponivel
  Indisponivel
}

model FilterAttribute {
  id             String                @id @default(uuid())
  groupFilter    GroupFilter?          @relation(fields: [groupFilter_id], references: [id])
  groupFilter_id String?
  value          String?               @db.VarChar(150)
  order          Int?
  status         StatusFilterAttribute @default(Disponivel)

  imagefilteratributos ImageFilterAtributo[]

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  store    Store?  @relation(fields: [store_id], references: [id])
  store_id String?

  @@map("filterattributes")
}

enum StatusFilterAttribute {
  Disponivel
  Indisponivel
}

model ImageFilterAtributo {
  id                 String          @id @default(uuid())
  filterAttribute    FilterAttribute @relation(fields: [filterAttribute_id], references: [id])
  filterAttribute_id String
  imageAtributo      String

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  @@map("imagefilteratributos")
}

model FilterCategory {
  id             String               @id @default(uuid())
  groupFilter    GroupFilter?         @relation(fields: [groupFilter_id], references: [id])
  groupFilter_id String?
  category       Category?            @relation(fields: [name], references: [name])
  name           String?
  order          Int?
  status         StatusFilterCategory @default(Disponivel)

  imageFilterCategories ImageFilterCategory[]

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  store    Store?  @relation(fields: [store_id], references: [id])
  store_id String?

  @@map("filtercategories")
}

enum StatusFilterCategory {
  Disponivel
  Indisponivel
}

model ImageFilterCategory {
  id                String         @id @default(uuid())
  filterCategory    FilterCategory @relation(fields: [filterCategory_id], references: [id])
  filterCategory_id String
  imageCategory     String

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  @@map("imagefiltercategories")
}

model Banner {
  id           String       @id @default(uuid())
  title        String?      @db.VarChar(355)
  width        String?      @db.VarChar(55)
  height       String?      @db.VarChar(55)
  startDate    String?      @default("01/01/3075 00:00")
  endDate      String?      @default("01/01/5575 00:00")
  banner       String
  order        Int?
  url          String?
  position     String?      @db.VarChar(325)
  slugPosition String?      @db.VarChar(325)
  active       StatusBanner @default(Nao)

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  @@map("banners")
}

enum StatusBanner {
  Sim
  Nao
}

model Newsletter {
  id    String @id @default(uuid())
  name  String @db.VarChar(125)
  email String @db.VarChar(155)

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  store    Store?  @relation(fields: [store_id], references: [id])
  store_id String?

  @@map("newsletters")
}

model Contact {
  id      String  @id @default(uuid())
  name    String  @db.VarChar(125)
  email   String  @db.VarChar(155)
  phone   String? @db.VarChar(155)
  company String? @db.VarChar(255)
  sector  String? @db.VarChar(355)
  message String? @db.VarChar(5555)

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  store    Store?  @relation(fields: [store_id], references: [id])
  store_id String?

  @@map("contacts")
}