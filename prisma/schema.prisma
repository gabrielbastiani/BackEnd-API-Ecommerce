// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// criar uma migration: yarn prisma migrate dev

model User {
  id                String  @id @default(uuid())
  nameComplete      String  @db.VarChar(295)
  slug              String? @db.VarChar(295)
  email             String  @unique @db.VarChar(180)
  password          String
  cpf               String? @unique @db.VarChar(125)
  cnpj              String? @unique @db.VarChar(125)
  inscricaoEstadual String? @db.VarChar(155)
  phone             String? @db.VarChar(135)
  dataNascimento    String? @db.VarChar(125)
  genero            String? @db.VarChar(135)
  newslatter        String? @db.VarChar(7)
  local             String? @db.VarChar(405)
  numero            String? @db.VarChar(125)
  complemento       String? @db.VarChar(155)
  bairro            String? @db.VarChar(185)
  CEP               String? @db.VarChar(125)
  cidade            String? @db.VarChar(185)
  estado            String? @db.VarChar(185)

  loja    Loja?   @relation(fields: [loja_id], references: [id])
  loja_id String?

  authenticated Boolean @default(false)
  role          Role    @default(USER)

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  avaliacoes Avaliacao[]
  pagamentos Pagamento[]
  pedidos    Pedido[]

  @@map("users")
}

enum Role {
  USER
  ADMIN
}

model PasswordRecovery {
  id    String @id @default(uuid())
  email String

  @@map("passwordRecoverys")
}

model Loja {
  id              String  @id @default(uuid())
  logoLoja        String?
  nameLoja        String? @db.VarChar(185)
  cnpjLoja        String? @db.VarChar(85)
  emailLoja       String? @db.VarChar(95)
  phoneLoja       String? @db.VarChar(85)
  cellPhoneLoja   String? @db.VarChar(85)
  ruaLoja         String? @db.VarChar(405)
  numeroLoja      String? @db.VarChar(8)
  bairroLoja      String? @db.VarChar(95)
  complementoLoja String? @db.VarChar(155)
  cepLoja         String? @db.VarChar(25)
  cityLoja        String? @db.VarChar(185)
  stateLoja       String? @db.VarChar(155)

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  users                     User[]
  redessociais              RedeSocial[]
  textosinstitucionais      TextoInstitucional[]
  categories                Category[]
  groupcategories           GroupCategoy[]
  products                  Product[]
  variacoes                 Variacao[]
  atributos                 Atributo[]
  relationproductcategories RelationProductCategory[]
  avaliacoes                Avaliacao[]
  newsletters               Newsletter[]
  contatos                  Contato[]
  carrinhos                 Carrinho[]
  pagamentos                Pagamento[]
  entregas                  Entrega[]
  pedidos                   Pedido[]
  relationproductAtributos  RelationProductAtributo[]
  groupfilters              GroupFilter[]
  filterAtributos           FilterAtributo[]
  FilterCategory            FilterCategory[]

  @@map("lojas")
}

model RedeSocial {
  id              String           @id @default(uuid())
  redeName        String?          @db.VarChar(325)
  link            String?          @db.VarChar(2725)
  imageRede       String?
  order           Int?
  posicao         String?          @db.VarChar(300)
  slugPosicao     String?          @db.VarChar(295)
  disponibilidade StatusRedeSocial @default(Disponivel)

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  loja    Loja?   @relation(fields: [loja_id], references: [id])
  loja_id String?

  @@map("redessociais")
}

enum StatusRedeSocial {
  Disponivel
  Indisponivel
}

model TextoInstitucional {
  id              String                   @id @default(uuid())
  title           String                   @db.VarChar(325)
  slug            String?                  @unique @db.VarChar(325)
  order           Int?
  posicao         String?                  @db.VarChar(300)
  slugPosicao     String?                  @db.VarChar(325)
  description     String?                  @db.VarChar(95725)
  disponibilidade StatusTextoInstitucional @default(Disponivel)

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  loja    Loja?   @relation(fields: [loja_id], references: [id])
  loja_id String?

  imagesloja ImageLoja[]

  @@map("textosinstitucionais")
}

enum StatusTextoInstitucional {
  Disponivel
  Indisponivel
}

model ImageLoja {
  id              String           @id @default(uuid())
  titleImage      String?          @db.VarChar(425)
  image           String?
  order           Int?
  posicao         String?          @db.VarChar(300)
  slugPosicao     String?          @db.VarChar(325)
  disponibilidade StatusImagemLoja @default(Disponivel)
  someImage       Boolean          @default(false)

  textoInstitucional    TextoInstitucional? @relation(fields: [textoinstitucional_id], references: [id])
  textoinstitucional_id String?

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  @@map("imagesloja")
}

enum StatusImagemLoja {
  Disponivel
  Indisponivel
}

model Product {
  id                  String         @id @default(uuid())
  nameProduct         String         @db.VarChar(325)
  slug                String?        @db.VarChar(325)
  order               Int?
  posicao             String?        @db.VarChar(300)
  slugPosicao         String?        @db.VarChar(325)
  descriptionProduct1 String?        @db.VarChar(1725)
  descriptionProduct2 String?        @db.VarChar(1725)
  descriptionProduct3 String?        @db.VarChar(1725)
  descriptionProduct4 String?        @db.VarChar(1725)
  descriptionProduct5 String?        @db.VarChar(1725)
  descriptionProduct6 String?        @db.VarChar(1725)
  preco               Int?
  promocao            Int?
  sku                 String?        @db.VarChar(25)
  disponibilidade     StatusProduct  @default(Disponivel)
  produtoDestaque     StatusDestaque @default(Nao)
  produtoOferta       StatusOferta   @default(Nao)

  loja    Loja?   @relation(fields: [loja_id], references: [id])
  loja_id String?

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  relationproductcategories RelationProductCategory[]
  photoproducts             PhotoProduct[]
  variacoes                 Variacao[]
  photovariacoes            PhotoVariacao[]
  avaliacoes                Avaliacao[]
  item                      Item[]
  relationProductAtributos  RelationProductAtributo[]

  @@map("products")
}

enum StatusProduct {
  Disponivel
  Indisponivel
}

enum StatusDestaque {
  Sim
  Nao
}

enum StatusOferta {
  Sim
  Nao
}

model Category {
  id              String         @id @default(uuid())
  categoryName    String?        @unique @db.VarChar(300)
  slug            String?        @db.VarChar(300)
  order           Int?
  disponibilidade StatusCategory @default(Disponivel)

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  loja    Loja?   @relation(fields: [loja_id], references: [id])
  loja_id String?

  imagecategories           ImageCategory[]
  groupcategories           GroupCategoy[]
  relationproductcategories RelationProductCategory[]
  filtercategory            FilterCategory[]

  @@map("categories")
}

enum StatusCategory {
  Disponivel
  Indisponivel
}

model ImageCategory {
  id            String    @id @default(uuid())
  categoryImage String?
  category      Category? @relation(fields: [category_id], references: [id])
  category_id   String?

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  @@map("imagecategories")
}

model GroupCategoy {
  id                 String      @id @default(uuid())
  nameGroup          String?     @db.VarChar(385)
  itemName           String?     @db.VarChar(385)
  slugCategoryOrItem String?     @db.VarChar(400)
  posicao            String?     @db.VarChar(300)
  slugPosicao        String?     @db.VarChar(325)
  order              Int?
  nivel              Int?
  groupId            String?
  category           Category?   @relation(fields: [category_id], references: [id])
  category_id        String?
  status             StatusGroup @default(Ativo)

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  loja    Loja?   @relation(fields: [loja_id], references: [id])
  loja_id String?

  imagegroupcategories ImageGroupCategory[]

  @@map("groupcategories")
}

enum StatusGroup {
  Ativo
  Inativo
}

model ImageGroupCategory {
  id              String        @id @default(uuid())
  imageGroup      String?
  groupCategoy    GroupCategoy? @relation(fields: [groupCategoy_id], references: [id])
  groupCategoy_id String?

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  @@map("imagegroupcategories")
}

model RelationProductCategory {
  id               String        @id @default(uuid())
  product          Product?      @relation(fields: [product_id], references: [id])
  product_id       String?
  photoProduct     PhotoProduct? @relation(name: "photos", fields: [photoProduct_id], references: [id])
  photoProduct_id  String?
  photoProduct1    PhotoProduct? @relation(fields: [photoProduct_id1], references: [id])
  photoProduct_id1 String?
  category         Category      @relation(fields: [category_id], references: [id])
  category_id      String
  nivel            Int?
  relationId       String?
  order            Int?
  posicao          String?       @db.VarChar(300)
  slugPosicao      String?       @db.VarChar(325)

  loja    Loja?   @relation(fields: [loja_id], references: [id])
  loja_id String?

  status StatusRelation @default(Ativo)

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  @@map("relationproductcategories")
}

enum StatusRelation {
  Ativo
  Inativo
}

model PhotoProduct {
  id          String   @id @default(uuid())
  photo       String?
  order       Int?
  posicao     String?  @db.VarChar(325)
  slugPosicao String?  @db.VarChar(325)
  product     Product? @relation(fields: [product_id], references: [id])
  product_id  String?

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  relationproductcategories  RelationProductCategory[] @relation("photos")
  relationproductcategories1 RelationProductCategory[]
  relationProductAtributos   RelationProductAtributo[] @relation("photos")
  relationProductAtributos1  RelationProductAtributo[]

  @@map("photoproducts")
}

model Atributo {
  id              String         @id @default(uuid())
  tipo            String?        @db.VarChar(325)
  slug            String?        @db.VarChar(325)
  valor           String?        @unique @db.VarChar(325)
  slugValor       String?        @db.VarChar(325)
  order           Int?
  disponibilidade StatusAtributo @default(Disponivel)

  loja    Loja?   @relation(fields: [loja_id], references: [id])
  loja_id String?

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  relationProductAtributos RelationProductAtributo[]
  imageatributos           ImageAtributo[]
  filteratributos          FilterAtributo[]

  @@map("atributos")
}

enum StatusAtributo {
  Disponivel
  Indisponivel
}

model RelationProductAtributo {
  id               String        @id @default(uuid())
  atributo         Atributo?     @relation(fields: [atributo_id], references: [id])
  atributo_id      String?
  product          Product?      @relation(fields: [product_id], references: [id])
  product_id       String?
  photoProduct     PhotoProduct? @relation(name: "photos", fields: [photoProduct_id], references: [id])
  photoProduct_id  String?
  photoProduct1    PhotoProduct? @relation(fields: [photoProduct_id1], references: [id])
  photoProduct_id1 String?
  variacao         Variacao?     @relation(fields: [variacao_id], references: [id])
  variacao_id      String?
  order            Int?

  loja    Loja?   @relation(fields: [loja_id], references: [id])
  loja_id String?

  status StatusRelationAtributo @default(Ativo)

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  @@map("relationproductatributos")
}

enum StatusRelationAtributo {
  Ativo
  Inativo
}

model ImageAtributo {
  id            String    @id @default(uuid())
  imageAtributo String?
  atributo      Atributo? @relation(fields: [atributo_id], references: [id])
  atributo_id   String?

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  @@map("imageatributos")
}

model GroupFilter {
  id                 String            @id @default(uuid())
  nameGroup          String?           @unique @db.VarChar(385)
  atributoName       String?           @unique @db.VarChar(385)
  slugCategoryOrItem String?           @db.VarChar(400)
  status             StatusGroupFilter @default(Ativo)

  filteratributos    FilterAtributo[]
  filtercategories   FilterCategory[]

  loja    Loja?   @relation(fields: [loja_id], references: [id])
  loja_id String?

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  @@map("groupfilteratributos")
}

enum StatusGroupFilter {
  Ativo
  Inativo
}

model FilterAtributo {
  id                   String                @id @default(uuid())
  groupFilter          GroupFilter?          @relation(fields: [atributoName], references: [atributoName])
  atributoName         String?
  atributo             Atributo?             @relation(fields: [valor], references: [valor])
  valor                String?
  order                Int?
  status               StatusFilterAtributo  @default(Ativo)
  Imagefilteratributos ImageFilterAtributo[]

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  loja    Loja?   @relation(fields: [loja_id], references: [id])
  loja_id String?

  @@map("filteratributos")
}

enum StatusFilterAtributo {
  Ativo
  Inativo
}

model FilterCategory {
  id                  String                @id @default(uuid())
  groupFilter         GroupFilter?          @relation(fields: [nameGroup], references: [nameGroup])
  nameGroup           String?
  category            Category?             @relation(fields: [categoryName], references: [categoryName])
  categoryName        String?
  order               Int?
  status              StatusFilterCategory  @default(Ativo)
  imageFilterCategory ImageFilterCategory[]

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  loja    Loja?   @relation(fields: [loja_id], references: [id])
  loja_id String?

  @@map("filtercategories")
}

enum StatusFilterCategory {
  Ativo
  Inativo
}

model ImageFilterCategory {
  id                String          @id @default(uuid())
  imageCategory     String?
  filterCategory    FilterCategory? @relation(fields: [filterCategory_id], references: [id])
  filterCategory_id String?

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  @@map("imagefiltercategories")
}

model ImageFilterAtributo {
  id             String          @id @default(uuid())
  imageAtributo  String?
  filterAtributo FilterAtributo? @relation(fields: [filter_id], references: [id])
  filter_id      String?

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  @@map("imagefilteratributos")
}

model Banner {
  id          String       @id @default(uuid())
  title       String?      @db.VarChar(355)
  width       String?      @db.VarChar(55)
  height      String?      @db.VarChar(55)
  dateInicio  String?      @default("01/01/3075 00:00")
  dateFim     String?      @default("01/01/5575 00:00")
  banner      String?
  order       Int?
  url         String?
  posicao     String?      @db.VarChar(325)
  slugPosicao String?      @db.VarChar(325)
  active      StatusBanner @default(Nao)

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  @@map("banners")
}

enum StatusBanner {
  Sim
  Nao
}

model Variacao {
  id                      String                 @id @default(uuid())
  nameVariacao            String?                @db.VarChar(355)
  slug                    String?                @db.VarChar(355)
  order                   Int?
  posicao                 String?                @db.VarChar(325)
  slugPosicao             String?                @db.VarChar(325)
  descriptionVariacao1    String?                @db.VarChar(1725)
  descriptionVariacao2    String?                @db.VarChar(1725)
  descriptionVariacao3    String?                @db.VarChar(1725)
  descriptionVariacao4    String?                @db.VarChar(1725)
  descriptionVariacao5    String?                @db.VarChar(1725)
  descriptionVariacao6    String?                @db.VarChar(1725)
  preco                   Int?
  promocao                Int?
  skuVariacao             String?                @db.VarChar(25)
  estoqueVariacao         Int?
  pesoKg                  String?                @db.VarChar(15)
  larguraCm               String?                @db.VarChar(15)
  alturaCm                String?                @db.VarChar(15)
  profundidadeCm          String?                @db.VarChar(15)
  disponibilidadeVariacao StatusVariacao         @default(Disponivel)
  freteGratis             StatusFrete            @default(Sim)
  quantidade              Int?
  quantidadeBloqueada     Int?                   @default(0)
  product                 Product?               @relation(fields: [product_id], references: [id])
  product_id              String?
  variacaoDestaque        StatusDestaqueVariacao @default(Nao)
  variacaoOferta          StatusOfertaVariacao   @default(Nao)

  loja    Loja?   @relation(fields: [loja_id], references: [id])
  loja_id String?

  photovariacoes           PhotoVariacao[]
  relationProductAtributos RelationProductAtributo[]
  item                     Item[]

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  @@map("variacoes")
}

enum StatusVariacao {
  Disponivel
  Indisponivel
}

enum StatusFrete {
  Sim
  Nao
}

enum StatusDestaqueVariacao {
  Sim
  Nao
}

enum StatusOfertaVariacao {
  Sim
  Nao
}

model PhotoVariacao {
  id            String    @id @default(uuid())
  photoVariacao String
  order         Int?
  posicao       String?   @db.VarChar(325)
  slugPosicao   String?   @db.VarChar(325)
  variacao      Variacao? @relation(fields: [variacao_id], references: [id])
  variacao_id   String?
  product       Product?  @relation(fields: [product_id], references: [id])
  product_id    String?

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  @@map("photovariacoes")
}

model Avaliacao {
  id          String   @id @default(uuid())
  user        User?    @relation(fields: [user_id], references: [id])
  user_id     String?
  description String?  @db.VarChar(1225)
  pontuacao   String?  @db.VarChar(175)
  product     Product? @relation(fields: [product_id], references: [id])
  product_id  String?
  status      String?

  loja    Loja?   @relation(fields: [loja_id], references: [id])
  loja_id String?

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  @@map("avaliacoes")
}

model Newsletter {
  id    String @id @default(uuid())
  name  String @db.VarChar(125)
  email String @db.VarChar(155)

  loja    Loja?   @relation(fields: [loja_id], references: [id])
  loja_id String?

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  @@map("newsletters")
}

model Contato {
  id       String  @id @default(uuid())
  name     String? @db.VarChar(125)
  email    String? @db.VarChar(155)
  phone    String? @db.VarChar(155)
  empresa  String? @db.VarChar(255)
  setor    String? @db.VarChar(355)
  mensagem String? @db.VarChar(5555)

  loja    Loja?   @relation(fields: [loja_id], references: [id])
  loja_id String?

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  @@map("contatos")
}

model Item {
  id            String    @id @default(uuid())
  carrinho      Carrinho? @relation(fields: [carrinho_id], references: [id])
  carrinho_id   String?
  product       Product?  @relation(fields: [product_id], references: [id])
  product_id    String?
  variacao      Variacao? @relation(fields: [variacao_id], references: [id])
  variacao_id   String?
  quantidade    Int?
  precoUnitario Int?

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  @@map("itens")
}

model Carrinho {
  id             String  @id @default(uuid())
  pedido         Pedido? @relation(fields: [pedido_id], references: [id])
  pedido_id      String?
  itens          Item[]
  custoEntrega   String?
  prazoEntrega   String?
  tipoEntrega    String?
  valorPagamento Int?

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  loja    Loja?   @relation(fields: [loja_id], references: [id])
  loja_id String?

  @@map("carrinhos")
}

model Entrega {
  id                 String  @id @default(uuid())
  codigoRastreamento String? @db.VarChar(95)
  status             Boolean @default(false)
  tipo               String? @db.VarChar(25)
  custo              Int?
  prazo              String? @db.VarChar(95)

  local       String? @db.VarChar(405)
  numero      String? @db.VarChar(25)
  complemento String? @db.VarChar(155)
  bairro      String? @db.VarChar(85)
  CEP         String? @db.VarChar(25)
  cidade      String? @db.VarChar(185)
  estado      String? @db.VarChar(155)

  pedido    Pedido? @relation(fields: [pedido_id], references: [id])
  pedido_id String?
  loja      Loja?   @relation(fields: [loja_id], references: [id])
  loja_id   String?

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  @@map("entregas")
}

model Pagamento {
  id               String  @id @default(uuid())
  valor            Int?
  formaDePagamento String? @db.VarChar(55)
  parcelas         String? @db.VarChar(15)
  status           String? @db.VarChar(55)

  ruaPagamento         String? @db.VarChar(405)
  numeroPagamento      String? @db.VarChar(8)
  bairroPagamento      String? @db.VarChar(95)
  complementoPagamento String? @db.VarChar(155)
  cepPagamento         String? @db.VarChar(25)
  cityPagamento        String? @db.VarChar(185)
  statePagamento       String? @db.VarChar(155)

  nomeCompletoPagamento String? @db.VarChar(95)
  codigoArea            String? @db.VarChar(15)
  phonePagamento        String? @db.VarChar(15)
  dataDeNascimento      String? @db.VarChar(15)
  credit_card_token     String?
  cpfPagamento          String? @db.VarChar(15)

  enderecoEntregaIgualCobranca Boolean @default(true)
  user                         User?   @relation(fields: [user_id], references: [id])
  user_id                      String?
  pedido                       Pedido? @relation(name: "pagamentos", fields: [pedido_id], references: [id])
  pedido_id                    String?
  pagSeguroCode                String?

  loja    Loja?   @relation(fields: [loja_id], references: [id])
  loja_id String?

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  pedidos Pedido[]

  @@map("pagamentos")
}

model Pedido {
  id                           String          @id @default(uuid())
  user                         User?           @relation(fields: [user_id], references: [id])
  user_id                      String?
  carrinhos                    Carrinho[]
  entregas                     Entrega[]
  pagamentos                   Pagamento[]     @relation("pagamentos")
  pagamento                    Pagamento?      @relation(fields: [pagamento_id], references: [id])
  pagamento_id                 String?
  enderecoEntregaIgualCobranca EnderecoEntrega @default(Sim)
  cancelado                    StatusPedido    @default(Valido)

  loja    Loja?   @relation(fields: [loja_id], references: [id])
  loja_id String?

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  @@map("pedidos")
}

enum StatusPedido {
  Valido
  Cancelado
}

enum EnderecoEntrega {
  Sim
  Nao
}