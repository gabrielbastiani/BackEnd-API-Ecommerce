// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// criar uma migration: yarn prisma migrate dev

model Admin {
  id       String  @id @default(uuid())
  name     String  @db.VarChar(295)
  slug     String? @db.VarChar(295)
  email    String  @unique @db.VarChar(180)
  password String

  authenticated Boolean   @default(false)
  role          RoleAdmin @default(ADMIN)

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  store    Store?  @relation(fields: [store_id], references: [id])
  store_id String?

  @@map("admins")
}

enum RoleAdmin {
  EMPLOYEE
  ADMIN
}

model PasswordRecoveryAdmin {
  id    String @id @default(uuid())
  email String

  @@map("passwordrecoveryadmins")
}

model Customer {
  id                String  @id @default(uuid())
  name              String  @db.VarChar(295)
  slug              String? @db.VarChar(295)
  email             String  @unique @db.VarChar(180)
  password          String
  cpf               String? @unique @db.VarChar(125)
  cnpj              String? @unique @db.VarChar(125)
  stateRegistration String? @db.VarChar(155)
  phone             String? @db.VarChar(135)
  dateOfBirth       String? @db.VarChar(125)
  gender            String? @db.VarChar(135)
  newslatter        String? @db.VarChar(7)
  addressee         String? @db.VarChar(405)
  address           String? @db.VarChar(405)
  number            String? @db.VarChar(125)
  complement        String? @db.VarChar(155)
  reference         String? @db.VarChar(805)
  neighborhood      String? @db.VarChar(185)
  cep               String? @db.VarChar(125)
  city              String? @db.VarChar(185)
  state             String? @db.VarChar(185)
  authenticated     Boolean @default(true)

  deliveryaddresscustomers DeliveryAddressCustomer[]
  avalietions              Avalietion[]
  cart                     Cart[]
  cartstotal               CartTotal[]
  cartstotalfinish         CartTotalFinish[]

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  store    Store?  @relation(fields: [store_id], references: [id])
  store_id String?

  @@map("customers")
}

model DeliveryAddressCustomer {
  id               String           @id @default(uuid())
  customer         Customer?        @relation(fields: [customer_id], references: [id])
  customer_id      String?
  addressee        String?          @db.VarChar(405)
  address          String?          @db.VarChar(405)
  number           String?          @db.VarChar(125)
  complement       String?          @db.VarChar(155)
  reference        String?          @db.VarChar(405)
  neighborhood     String?          @db.VarChar(185)
  cep              String?          @db.VarChar(125)
  city             String?          @db.VarChar(185)
  state            String?          @db.VarChar(185)
  phone            String?          @db.VarChar(135)
  deliverySelected SelectedDelivery @default(Sim)

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  store    Store?  @relation(fields: [store_id], references: [id])
  store_id String?

  @@map("deliveryaddresscustomers")
}

enum SelectedDelivery {
  Sim
  Nao
}

model PasswordRecoveryCustomer {
  id    String @id @default(uuid())
  email String

  @@map("passwordrecoverycustomers")
}

model Store {
  id           String  @id @default(uuid())
  logo         String?
  name         String? @db.VarChar(185)
  cnpj         String? @db.VarChar(85)
  email        String? @db.VarChar(95)
  phone        String? @db.VarChar(85)
  cellPhone    String? @db.VarChar(85)
  address      String? @db.VarChar(405)
  number       String? @db.VarChar(8)
  neighborhood String? @db.VarChar(95)
  complement   String? @db.VarChar(155)
  cep          String? @db.VarChar(25)
  city         String? @db.VarChar(185)
  state        String? @db.VarChar(155)

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  admins                    Admin[]
  customers                 Customer[]
  deliveryaddresscustomers  DeliveryAddressCustomer[]
  socialmedias              SocialMedia[]
  institutionaltexts        InstitutionalText[]
  categories                Category[]
  products                  Product[]
  imagestores               ImageStore[]
  tags                      Tag[]
  typeattributes            TypeAttribute[]
  relationattributeproducts RelationAttributeProduct[]
  menucategories            MenuCategory[]
  avalietions               Avalietion[]
  newsletters               Newsletter[]
  contacts                  Contact[]
  productcategories         ProductCategory[]
  groupfilters              GroupFilter[]
  filterattributes          FilterAttribute[]
  filtercategories          FilterCategory[]
  buytogethers              BuyTogether[]
  productsvariations        ProductVariation[]
  valuesattributes          ValueAttribute[]
  coupons                   Coupon[]
  countersproposals         CounterProposal[]
  stockproductcustomer      StockProductCustomer[]
  payments                  Payment[]

  @@map("stores")
}

model SocialMedia {
  id           String            @id @default(uuid())
  store        Store?            @relation(fields: [store_id], references: [id])
  store_id     String?
  name         String?           @db.VarChar(325)
  link         String?           @db.VarChar(2725)
  image        String?
  order        Int?
  position     String?           @db.VarChar(300)
  slugPosition String?           @db.VarChar(295)
  status       StatusSocialMedia @default(Disponivel)

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  @@map("socialmedias")
}

enum StatusSocialMedia {
  Disponivel
  Indisponivel
}

model InstitutionalText {
  id           String                  @id @default(uuid())
  store        Store?                  @relation(fields: [store_id], references: [id])
  store_id     String?
  title        String                  @db.VarChar(325)
  slug         String?                 @unique @db.VarChar(325)
  order        Int?
  position     String?                 @db.VarChar(300)
  slugPosition String?                 @db.VarChar(325)
  description  String?
  status       StatusInstitutionalText @default(Disponivel)

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  @@map("institutionaltexts")
}

enum StatusInstitutionalText {
  Disponivel
  Indisponivel
}

model ImageStore {
  id           String           @id @default(uuid())
  store        Store?           @relation(fields: [store_id], references: [id])
  store_id     String?
  titleImage   String?          @db.VarChar(425)
  image        String?
  order        Int?
  position     String?          @db.VarChar(300)
  slugPosition String?          @db.VarChar(325)
  status       StatusImageStore @default(Disponivel)

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  @@map("imagesstore")
}

enum StatusImageStore {
  Disponivel
  Indisponivel
}

model Category {
  id          String         @id @default(uuid())
  name        String?        @unique @db.VarChar(300)
  slug        String?        @db.VarChar(300)
  description String?        @db.VarChar(15725)
  nivel       Int?
  parentId    String?
  order       Int?
  status      StatusCategory @default(Disponivel)

  imagecategories   ImageCategory[]
  productcategories ProductCategory[]
  menucategories    MenuCategory[]
  filtercategories  FilterCategory[]

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  store    Store?  @relation(fields: [store_id], references: [id])
  store_id String?

  @@map("categories")
}

enum StatusCategory {
  Disponivel
  Indisponivel
}

model ImageCategory {
  id          String   @id @default(uuid())
  category    Category @relation(fields: [category_id], references: [id])
  category_id String
  image       String

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  @@map("imagecategories")
}

model Product {
  id             String             @id @default(uuid())
  name           String             @db.VarChar(325)
  slug           String?            @db.VarChar(325)
  price          Float?
  promotion      Float?
  sku            String?            @db.VarChar(25)
  stock          Int?
  weight         String?            @db.VarChar(15)
  width          String?            @db.VarChar(15)
  height         String?            @db.VarChar(15)
  depth          String?            @db.VarChar(15)
  amount         Int?
  reservedAmount Int?
  brand          String?            @db.VarChar(325)
  urlVideo       String?
  gtin           String?
  mpn            String?
  ncm            String?
  freeShipping   StatusFreeShipping @default(Sim)
  status         StatusProduct      @default(Disponivel)
  emphasis       StatusEmphasis     @default(Nao)
  offer          StatusOffer        @default(Nao)
  buyTogether    BuyTogether?       @relation(fields: [buyTogether_id], references: [id])
  buyTogether_id String?

  photoproducts             PhotoProduct[]
  descriptionproducts       DescriptionProduct[]
  tags                      Tag[]
  relationattributeproducts RelationAttributeProduct[]
  avalietions               Avalietion[]
  productcategories         ProductCategory[]
  buytogethers              BuyTogether[]              @relation("buy")
  productsvariations        ProductVariation[]
  stockproductcustomer      StockProductCustomer[]
  cupomsproducts            CuponProduct[]
  carts                     Cart[]

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  store    Store?  @relation(fields: [store_id], references: [id])
  store_id String?

  @@map("products")
}

enum StatusFreeShipping {
  Sim
  Nao
}

enum StatusProduct {
  Disponivel
  Indisponivel
}

enum StatusEmphasis {
  Sim
  Nao
}

enum StatusOffer {
  Sim
  Nao
}

model PhotoProduct {
  id         String  @id @default(uuid())
  product    Product @relation(fields: [product_id], references: [id])
  product_id String
  image      String
  order      Int?

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  @@map("photoproducts")
}

model DescriptionProduct {
  id          String                   @id @default(uuid())
  product     Product                  @relation(fields: [product_id], references: [id])
  product_id  String
  title       String?                  @db.VarChar(500)
  description String?
  order       Int?
  status      StatusDescriptionProduct @default(Disponivel)

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  @@map("descriptionproducts")
}

enum StatusDescriptionProduct {
  Disponivel
  Indisponivel
}

model ProductCategory {
  id           String                @id @default(uuid())
  product      Product               @relation(fields: [product_id], references: [id])
  product_id   String
  category     Category              @relation(fields: [name], references: [name])
  name         String
  order        Int?
  status       StatusProductCategory @default(Disponivel)
  mainCategory MainCategory          @default(Nao)

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  store    Store?  @relation(fields: [store_id], references: [id])
  store_id String?

  @@map("productcategories")
}

enum StatusProductCategory {
  Disponivel
  Indisponivel
}

enum MainCategory {
  Sim
  Nao
}

model Tag {
  id         String  @id @default(uuid())
  product    Product @relation(fields: [product_id], references: [id])
  product_id String
  tagName    String  @db.VarChar(100)

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  store    Store?  @relation(fields: [store_id], references: [id])
  store_id String?

  @@map("tags")
}

model TypeAttribute {
  id   String  @id @default(uuid())
  type String? @unique @db.VarChar(300)
  slug String?

  valueattribute            ValueAttribute[]
  relationattributeproducts RelationAttributeProduct[]

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  store    Store?  @relation(fields: [store_id], references: [id])
  store_id String?

  @@map("typeattributes")
}

model ValueAttribute {
  id            String         @id @default(uuid())
  typeAttribute TypeAttribute? @relation(fields: [type], references: [type])
  type          String?
  value         String?        @db.VarChar(110)
  slug          String?
  order         Int?

  imageAttribute ImageAttribute[]

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  store                    Store?                     @relation(fields: [store_id], references: [id])
  store_id                 String?
  RelationAttributeProduct RelationAttributeProduct[]

  @@map("valuesattributes")
}

model ImageAttribute {
  id                String         @id @default(uuid())
  valueAttribute    ValueAttribute @relation(fields: [valueAttribute_id], references: [id])
  valueAttribute_id String
  image             String

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  @@map("imageattributes")
}

model RelationAttributeProduct {
  id                String                         @id @default(uuid())
  product           Product?                       @relation(fields: [product_id], references: [id])
  product_id        String?
  typeAttribute     TypeAttribute?                 @relation(fields: [type], references: [type])
  type              String?
  valueAttribute    ValueAttribute?                @relation(fields: [valueAttribute_id], references: [id])
  valueAttribute_id String?
  order             Int?
  status            StatusRelationAttributeProduct @default(Disponivel)

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  store    Store?  @relation(fields: [store_id], references: [id])
  store_id String?

  @@map("relationattributeproducts")
}

enum StatusRelationAttributeProduct {
  Disponivel
  Indisponivel
}

model Avalietion {
  id          String   @id @default(uuid())
  customer    Customer @relation(fields: [customer_id], references: [id])
  customer_id String
  product     Product  @relation(fields: [product_id], references: [id])
  product_id  String
  description String?  @db.VarChar(1225)
  point       String?  @db.VarChar(175)
  status      String?

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  store    Store?  @relation(fields: [store_id], references: [id])
  store_id String?

  @@map("avalietions")
}

model ProductVariation {
  id               String                 @id @default(uuid())
  product          Product                @relation(fields: [product_id], references: [id])
  product_id       String
  variationName    String?                @db.VarChar(325)
  variationProduct String?                @db.VarChar(1125)
  order            Int?
  status           StatusProductVariation @default(Disponivel)

  photovariations PhotoVariation[]

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  store    Store?  @relation(fields: [store_id], references: [id])
  store_id String?

  @@map("productsvariations")
}

enum StatusProductVariation {
  Disponivel
  Indisponivel
}

model PhotoVariation {
  id                  String           @id @default(uuid())
  productVariation    ProductVariation @relation(fields: [productVariation_id], references: [id])
  productVariation_id String
  image               String
  order               Int?

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  @@map("photovariations")
}

model BuyTogether {
  id         String            @id @default(uuid())
  nameGroup  String?           @db.VarChar(385)
  product    Product?          @relation(name: "buy", fields: [product_id], references: [id])
  product_id String?
  nivel      Int?
  parentId   String?
  order      Int?
  status     StatusBuyTogether @default(Disponivel)

  products Product[]

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  store    Store?  @relation(fields: [store_id], references: [id])
  store_id String?

  @@map("buytogethers")
}

enum StatusBuyTogether {
  Disponivel
  Indisponivel
}

model CounterProposal {
  id                String  @id @default(uuid())
  currentPrice      Float?
  counterOfferPrice Float?
  name              String? @db.VarChar(185)
  email             String
  phone             String? @db.VarChar(85)
  lowestPricePlace  String?
  moreInformation   String? @db.VarChar(1585)
  sku               String? @db.VarChar(285)
  nameProduct       String? @db.VarChar(485)
  codeCoupon        String? @db.VarChar(285)
  information       String? @db.VarChar(6585)
  status            String? @db.VarChar(200)

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  store    Store?  @relation(fields: [store_id], references: [id])
  store_id String?

  @@map("countersproposals")
}

model StockProductCustomer {
  id         String  @id @default(uuid())
  email      String  @db.VarChar(685)
  product    Product @relation(fields: [product_id], references: [id])
  product_id String

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  store    Store?  @relation(fields: [store_id], references: [id])
  store_id String?

  @@map("stockproductscustomers")
}

model Coupon {
  id           String       @id @default(uuid())
  name         String?      @db.VarChar(385)
  description  String?      @db.VarChar(685)
  startDate    String?      @default("01/01/3075 00:00")
  endDate      String?      @default("01/01/5575 00:00")
  code         String?      @db.VarChar(385)
  amountCoupon Int?
  active       StatusCoupon @default(Nao)

  coupomsconditionals CouponConditional[]
  cupomsproducts      CuponProduct[]

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  store    Store?  @relation(fields: [store_id], references: [id])
  store_id String?

  @@map("coupons")
}

enum StatusCoupon {
  Sim
  Nao
}

model CouponConditional {
  id          String  @id @default(uuid())
  coupon      Coupon? @relation(fields: [cupon_id], references: [id])
  cupon_id    String?
  conditional String?
  value       Float?

  @@map("coupomsconditionals")
}

model CuponProduct {
  id         String   @id @default(uuid())
  coupon     Coupon?  @relation(fields: [cupon_id], references: [id])
  cupon_id   String?
  product    Product? @relation(fields: [product_id], references: [id])
  product_id String?

  @@map("cupomsproducts")
}

model MenuCategory {
  id           String             @id @default(uuid())
  nameGroup    String?            @db.VarChar(385)
  category     Category?          @relation(fields: [name], references: [name])
  name         String?
  categoryName String?            @db.VarChar(385)
  slugCategory String?            @db.VarChar(400)
  position     String?            @db.VarChar(300)
  slugPosition String?            @db.VarChar(325)
  order        Int?
  nivel        Int?
  parentId     String?
  status       StatusMenuCategory @default(Disponivel)

  imagemenucategories ImageMenuCategory[]

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  store    Store?  @relation(fields: [store_id], references: [id])
  store_id String?

  @@map("menucategories")
}

enum StatusMenuCategory {
  Disponivel
  Indisponivel
}

model ImageMenuCategory {
  id              String       @id @default(uuid())
  menuCategory    MenuCategory @relation(fields: [menuCategory_id], references: [id])
  menuCategory_id String
  image           String

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  @@map("imagemenucategories")
}

model GroupFilter {
  id            String            @id @default(uuid())
  nameGroup     String?           @db.VarChar(385)
  typeAttribute String?
  slugCategory  String?           @db.VarChar(400)
  order         Int?
  status        StatusGroupFilter @default(Disponivel)

  filtercategories FilterCategory[]
  filterattributes FilterAttribute[]

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  store    Store?  @relation(fields: [store_id], references: [id])
  store_id String?

  @@map("groupfilters")
}

enum StatusGroupFilter {
  Disponivel
  Indisponivel
}

model FilterAttribute {
  id             String                @id @default(uuid())
  groupFilter    GroupFilter?          @relation(fields: [groupFilter_id], references: [id])
  groupFilter_id String?
  value          String?               @db.VarChar(150)
  order          Int?
  status         StatusFilterAttribute @default(Disponivel)

  imagefilteratributos ImageFilterAttribute[]

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  store    Store?  @relation(fields: [store_id], references: [id])
  store_id String?

  @@map("filterattributes")
}

enum StatusFilterAttribute {
  Disponivel
  Indisponivel
}

model ImageFilterAttribute {
  id                 String          @id @default(uuid())
  filterAttribute    FilterAttribute @relation(fields: [filterAttribute_id], references: [id])
  filterAttribute_id String
  imageAttribute     String

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  @@map("imagefilteratributos")
}

model FilterCategory {
  id             String               @id @default(uuid())
  groupFilter    GroupFilter?         @relation(fields: [groupFilter_id], references: [id])
  groupFilter_id String?
  category       Category?            @relation(fields: [name], references: [name])
  name           String?
  order          Int?
  status         StatusFilterCategory @default(Disponivel)

  imageFilterCategories ImageFilterCategory[]

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  store    Store?  @relation(fields: [store_id], references: [id])
  store_id String?

  @@map("filtercategories")
}

enum StatusFilterCategory {
  Disponivel
  Indisponivel
}

model ImageFilterCategory {
  id                String         @id @default(uuid())
  filterCategory    FilterCategory @relation(fields: [filterCategory_id], references: [id])
  filterCategory_id String
  imageCategory     String

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  @@map("imagefiltercategories")
}

model Banner {
  id           String       @id @default(uuid())
  title        String?      @db.VarChar(355)
  width        String?      @db.VarChar(55)
  height       String?      @db.VarChar(55)
  startDate    String?      @default("01/01/3075 00:00")
  endDate      String?      @default("01/01/5575 00:00")
  banner       String
  order        Int?
  url          String?
  position     String?      @db.VarChar(325)
  slugPosition String?      @db.VarChar(325)
  active       StatusBanner @default(Nao)

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  @@map("banners")
}

enum StatusBanner {
  Sim
  Nao
}

model Newsletter {
  id    String @id @default(uuid())
  name  String @db.VarChar(125)
  email String @db.VarChar(155)

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  store    Store?  @relation(fields: [store_id], references: [id])
  store_id String?

  @@map("newsletters")
}

model Contact {
  id      String  @id @default(uuid())
  name    String  @db.VarChar(125)
  email   String  @db.VarChar(155)
  phone   String? @db.VarChar(155)
  company String? @db.VarChar(255)
  sector  String? @db.VarChar(355)
  message String? @db.VarChar(5555)

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  store    Store?  @relation(fields: [store_id], references: [id])
  store_id String?

  @@map("contacts")
}

model Cart {
  id            String    @id @default(uuid())
  store_cart_id String?
  product       Product?  @relation(fields: [product_id], references: [id])
  product_id    String?   @db.VarChar(825)
  amount        Float?
  total         Float?
  customer      Customer? @relation(fields: [customer_id], references: [id])
  customer_id   String?

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  @@map("carts")
}

model CartTotal {
  id                 String    @id @default(uuid())
  store_cart_id      String?
  total              Float?    @default(0)
  frete              Float?    @default(0)
  frete_coupon       Float?    @default(0)
  customer           Customer? @relation(fields: [customer_id], references: [id])
  customer_id        String?
  cep                String?   @db.VarChar(125)
  coupon             String?   @db.VarChar(225)
  new_subTotal       Float?    @default(0)
  new_value_products Json?

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  @@map("cartstotal")
}

model CartTotalFinish {
  id              String    @id @default(uuid())
  store_cart_id   String?
  totalCartFinish Float?    @default(0)
  customer        Customer? @relation(fields: [customer_id], references: [id])
  customer_id     String?

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  @@map("cartstotalfinish")
}

model Payment {
  id       String @id @default(uuid())
  name     String @db.VarChar(525)
  email    String @db.VarChar(555)
  status   String @db.VarChar(555)
  codigo   String @db.VarChar(555)
  id_venda String @db.VarChar(555)

  store    Store?  @relation(fields: [store_id], references: [id])
  store_id String?

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  @@map("payments")
}
