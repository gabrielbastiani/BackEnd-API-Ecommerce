// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// criar uma migration: yarn prisma migrate dev

model User {
  id                String   @id @default(uuid())
  nameComplete      String   @db.VarChar(95)
  email             String   @unique @db.VarChar(80)
  password          String
  cpfOrCnpj         String?  @unique @db.VarChar(25)
  inscricaoEstadual String?  @db.VarChar(55)
  phone             String?  @db.VarChar(35)
  dataNascimento    String?  @db.VarChar(25)
  genero            String?  @db.VarChar(35)
  newslatter        Boolean? @default(false)
  rua               String?  @db.VarChar(405)
  numero            String?  @db.VarChar(8)
  bairro            String?  @db.VarChar(95)
  complemento       String?  @db.VarChar(155)
  cep               String?  @db.VarChar(25)
  city              String?  @db.VarChar(185)
  state             String?  @db.VarChar(155)

  loja    Loja?   @relation(fields: [loja_id], references: [id])
  loja_id String?

  authenticated Boolean @default(false)
  role          Role    @default(USER)

  pedidos Pedido[]

  created_at DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("users")
}

enum Role {
  USER
  ADMIN
}

model PasswordRecovery {
  id    String @id @default(uuid())
  email String

  @@map("passwordRecoverys")
}

model Loja {
  id              String  @id @default(uuid())
  nameLoja        String? @db.VarChar(185)
  cnpjLoja        String? @db.VarChar(85)
  emailLoja       String? @db.VarChar(95)
  phoneLoja       String? @db.VarChar(85)
  ruaLoja         String? @db.VarChar(405)
  numeroLoja      String? @db.VarChar(8)
  bairroLoja      String? @db.VarChar(95)
  complementoLoja String? @db.VarChar(155)
  cepLoja         String? @db.VarChar(25)
  cityLoja        String? @db.VarChar(185)
  stateLoja       String? @db.VarChar(155)

  created_at DateTime @default(now())
  updatedAt  DateTime @updatedAt

  users      User[]
  categories Category[]
  products   Product[]
  variacoes  Variacao[]
  avaliacoes Avaliacao[]
  pedidos    Pedido[]
  pagamentos Pagamento[]
  entregas   Entrega[]

  @@map("lojas")
}

model Category {
  id              String  @id @default(uuid())
  categoryName    String  @unique @db.VarChar(100)
  codigo          String? @db.VarChar(100)
  disponibilidade Boolean @default(true)

  created_at DateTime @default(now())
  updatedAt  DateTime @updatedAt

  loja    Loja?   @relation(fields: [loja_id], references: [id])
  loja_id String?

  products Product[]

  @@map("categories")
}

model Product {
  id                  String  @id @default(uuid())
  nameProduct         String  @db.VarChar(225)
  descriptionProduct1 String? @db.VarChar(725)
  descriptionProduct2 String? @db.VarChar(725)
  descriptionProduct3 String? @db.VarChar(725)
  descriptionProduct4 String? @db.VarChar(725)
  descriptionProduct5 String? @db.VarChar(725)
  descriptionProduct6 String? @db.VarChar(725)
  price               String? @db.VarChar(15)
  sku                 String? @db.VarChar(25)
  estoque             String? @db.VarChar(15)
  pesoKG              String? @db.VarChar(15)
  larguraCM           String? @db.VarChar(15)
  alturaCM            String? @db.VarChar(15)
  profundidadeCM      String? @db.VarChar(15)
  disponibilidade     Boolean @default(true)
  promocao            String? @db.VarChar(15)

  category    Category? @relation(fields: [category_id], references: [id])
  category_id String?

  loja    Loja?   @relation(fields: [loja_id], references: [id])
  loja_id String?

  created_at DateTime @default(now())
  updatedAt  DateTime @updatedAt

  photoproducts PhotoProduct[]
  variacoes     Variacao[]
  avaliacoes    Avaliacao[]

  @@map("products")
}

model PhotoProduct {
  id    String  @id @default(uuid())
  photo String?

  product    Product? @relation(fields: [product_id], references: [id])
  product_id String?

  created_at DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("photoproducts")
}

model Variacao {
  id                      String  @id @default(uuid())
  nameVariacao            String? @db.VarChar(155)
  descriptionVariacao1    String? @db.VarChar(725)
  descriptionVariacao2    String? @db.VarChar(725)
  descriptionVariacao3    String? @db.VarChar(725)
  descriptionVariacao4    String? @db.VarChar(725)
  descriptionVariacao5    String? @db.VarChar(725)
  descriptionVariacao6    String? @db.VarChar(725)
  priceVariacao           String? @db.VarChar(15)
  skuVariacao             String? @db.VarChar(25)
  estoqueVariacao         String? @db.VarChar(15)
  pesoKGVariacao          String? @db.VarChar(15)
  larguraCMVariacao       String? @db.VarChar(15)
  alturaCMVariacao        String? @db.VarChar(15)
  profundidadeCMVariacao  String? @db.VarChar(15)
  disponibilidadeVariacao Boolean @default(true)
  promocaoVariacao        String? @db.VarChar(15)
  entregaGratisVariacao   Boolean @default(false)

  product    Product? @relation(fields: [product_id], references: [id])
  product_id String?

  loja    Loja?   @relation(fields: [loja_id], references: [id])
  loja_id String?

  photovariacoes PhotoVariacao[]

  created_at DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("variacoes")
}

model PhotoVariacao {
  id            String  @id @default(uuid())
  photoVariacao String?

  variacao    Variacao? @relation(fields: [variacao_id], references: [id])
  variacao_id String?

  created_at DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("photovariacoes")
}

model Avaliacao {
  id          String  @id @default(uuid())
  clientName  String? @db.VarChar(225)
  description String? @db.VarChar(225)
  pontuacao   String? @db.VarChar(25)

  product    Product? @relation(fields: [product_id], references: [id])
  product_id String?

  loja    Loja?   @relation(fields: [loja_id], references: [id])
  loja_id String?

  created_at DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("avaliacoes")
}

model Pedido {
  id             String  @id @default(uuid())
  precoUnitario  String? @db.VarChar(15)
  quantidade     String? @db.VarChar(55)
  productStatic  String? @db.VarChar(115)
  statusDoPedido Boolean @default(false)
  cancelado      Boolean @default(false)

  user    User?   @relation(fields: [user_id], references: [id])
  user_id String?

  pagamento    Pagamento? @relation(fields: [pagamento_id], references: [id])
  pagamento_id String?

  entrega    Entrega? @relation(fields: [entrega_id], references: [id])
  entrega_id String?

  loja    Loja?   @relation(fields: [loja_id], references: [id])
  loja_id String?

  created_at DateTime @default(now())
  updatedAt  DateTime @updatedAt

  writtenPagamento Pagamento[] @relation("WrittenPagamento")
  pinnedEntrega    Entrega[]   @relation("PinnedEntrega")

  @@map("pedidos")
}

model Pagamento {
  id               String  @id @default(uuid())
  valor            String? @db.VarChar(15)
  formaDePagamento String? @db.VarChar(55)
  parcelas         String? @db.VarChar(15)
  status           String? @db.VarChar(55)

  ruaPagamento         String? @db.VarChar(405)
  numeroPagamento      String? @db.VarChar(8)
  bairroPagamento      String? @db.VarChar(95)
  complementoPagamento String? @db.VarChar(155)
  cepPagamento         String? @db.VarChar(25)
  cityPagamento        String? @db.VarChar(185)
  statePagamento       String? @db.VarChar(155)

  nomeCompletoPagamento String? @db.VarChar(95)
  codigoArea            String? @db.VarChar(15)
  phonePagamento        String? @db.VarChar(15)
  dataDeNascimento      String? @db.VarChar(15)
  credit_card_token     String?
  cpfPagamento          String? @db.VarChar(15)

  enderecoEntregaIgualCobranca Boolean @default(true)
  pagSeguroCode                String?

  pedido    Pedido? @relation("WrittenPagamento", fields: [pedido_id], references: [id])
  pedido_id String?

  loja    Loja?   @relation(fields: [loja_id], references: [id])
  loja_id String?

  pedidos Pedido[]

  created_at DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("pagamentos")
}

model Entrega {
  id                 String  @id @default(uuid())
  codigoRastreamento String? @db.VarChar(95)
  status             Boolean @default(false)
  tipo               String? @db.VarChar(25)
  custo              String? @db.VarChar(15)
  prazoDeEntrega     String? @db.VarChar(95)

  ruaEntrega         String? @db.VarChar(405)
  numeroEntrega      String? @db.VarChar(25)
  complementoEntrega String? @db.VarChar(155)
  bairroEntrega      String? @db.VarChar(85)
  cepEntrega         String? @db.VarChar(25)
  cityEntrega        String? @db.VarChar(185)
  stateEntrega       String? @db.VarChar(155)

  pedido    Pedido? @relation("PinnedEntrega", fields: [pedido_id], references: [id])
  pedido_id String?

  loja    Loja?   @relation(fields: [loja_id], references: [id])
  loja_id String?

  pedidos Pedido[]

  created_at DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("entregas")
}